656
训练轮数：1
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.4907, -0.1097, -0.5915,  ..., -0.0483,  0.0365,  0.6763],
        [-0.2775,  0.4348, -0.1897,  ..., -0.0991,  0.1494,  0.6354],
        [-0.0777,  0.1480, -1.0036,  ...,  0.6498, -0.5876,  0.4653],
        ...,
        [-0.4136,  0.1419, -0.7667,  ...,  0.8463, -0.2291,  0.3062],
        [-0.4502,  0.3402, -0.8656,  ...,  0.7871, -0.4158,  0.4120],
        [-0.5862,  0.0071, -0.9760,  ...,  0.8267, -0.3386,  0.5463]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([777,  73, 151,  ..., 278, 777, 278], device='cuda:0')
预测结果的完整输出为： tensor([777,  73, 151,  ..., 278, 777, 278], device='cuda:0')
预测值的结果为： tensor([777], device='cuda:0')
decoder的输出结果为： tensor([[26, 27,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0],
        [96, 25,  0,  ...,  0,  0,  0],
        ...,
        [67, 25,  0,  ...,  0,  0,  0],
        [62, 25,  0,  ...,  0,  0,  0],
        [67, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：0，总数：1



Epoch: 1 batch index: 1/342 loss = 7.327372 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2646,  0.4656,  0.3698,  ...,  0.3549,  0.0423,  0.0200],
        [-0.9898,  0.2580, -0.3310,  ...,  0.3140, -0.2789,  0.8048],
        [-0.7947,  0.0764, -0.3359,  ...,  1.1822, -0.8604,  0.4457],
        ...,
        [-0.7370, -0.3065, -0.3941,  ...,  0.5633, -0.3943,  0.1026],
        [-0.6198, -0.1720, -0.4996,  ...,  0.5722, -0.2833,  0.4624],
        [-0.5604, -0.1641, -0.3976,  ...,  0.7342, -0.4388,  0.3611]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [116,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 95,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：2



Epoch: 1 batch index: 2/342 loss = 4.600723 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2684, -0.0472,  0.2704,  ...,  0.3259,  0.1607,  0.1888],
        [-0.7433, -0.1205,  0.0111,  ...,  0.3964, -0.0916,  0.3940],
        [-0.7094, -0.3441, -0.1563,  ...,  0.8877, -0.4265,  0.3131],
        ...,
        [-0.5397, -0.3056, -0.0536,  ...,  0.7120, -0.4980,  0.0385],
        [-0.5770, -0.1964,  0.2543,  ...,  0.7628, -0.4561,  0.1314],
        [-0.5561, -0.3290,  0.0354,  ...,  0.4842, -0.5102,  0.1875]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 99,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：3



Epoch: 1 batch index: 3/342 loss = 4.373397 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4380, -0.1967,  0.6757,  ...,  0.2638, -0.0677,  0.2901],
        [-0.3222, -0.3094,  0.2563,  ...,  0.5656, -0.2022,  0.4257],
        [-0.5194, -0.1905,  0.3943,  ...,  0.4691, -0.4066,  0.3905],
        ...,
        [-0.7478, -0.4178,  0.4672,  ...,  0.6027, -0.5290,  0.1666],
        [-0.6510, -0.5107,  0.3737,  ...,  0.6636, -0.4129,  0.1449],
        [-0.6306, -0.4282,  0.3982,  ...,  0.5934, -0.4905,  0.2026]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 94,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [116,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 64,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：4



Epoch: 1 batch index: 4/342 loss = 3.909558 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-2.8531e-01, -2.5486e-01,  7.1843e-01,  ...,  4.9769e-02,
          5.9881e-04,  5.8822e-02],
        [-1.5950e-01, -2.4110e-01,  8.1155e-01,  ...,  1.3389e-01,
         -1.4334e-01, -2.4420e-02],
        [-3.1329e-01, -3.0194e-01,  4.4122e-01,  ...,  4.3395e-01,
         -4.0428e-01,  1.2186e-01],
        ...,
        [-4.4650e-01, -5.5162e-01,  6.9694e-01,  ...,  3.8597e-01,
         -3.0670e-01, -1.4736e-01],
        [-4.7516e-01, -4.6324e-01,  5.9871e-01,  ...,  3.3551e-01,
         -3.9921e-01, -1.0695e-02],
        [-5.1686e-01, -6.2462e-01,  6.4887e-01,  ...,  2.7407e-01,
         -3.9168e-01,  5.8714e-03]], device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[126,  25,   0,  ...,   0,   0,   0],
        [111,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [101,  25,   0,  ...,   0,   0,   0],
        [ 48,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：5



Epoch: 1 batch index: 5/342 loss = 3.644099 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2678, -0.2682,  0.7648,  ...,  0.0334, -0.1915, -0.0337],
        [-0.2029, -0.4460,  0.4624,  ...,  0.1300, -0.3920,  0.2213],
        [-0.2095, -0.3688,  0.6770,  ...,  0.2383, -0.3646,  0.0611],
        ...,
        [-0.5060, -0.3922,  0.5608,  ...,  0.1973, -0.3088,  0.0983],
        [-0.4045, -0.4171,  0.5671,  ...,  0.2187, -0.2831,  0.0273],
        [-0.4756, -0.4059,  0.5410,  ...,  0.1935, -0.3316,  0.1185]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [133,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [120,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [114,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：6



Epoch: 1 batch index: 6/342 loss = 3.287971 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1109, -0.2826,  0.6093,  ..., -0.0169, -0.3416,  0.0735],
        [-0.1747, -0.3035,  0.4485,  ...,  0.2018, -0.4761,  0.2574],
        [-0.1967, -0.2261,  0.6272,  ...,  0.2178, -0.6512,  0.2554],
        ...,
        [-0.3149, -0.3575,  0.4210,  ...,  0.2801, -0.6554,  0.0846],
        [-0.3756, -0.3475,  0.4534,  ...,  0.2510, -0.6632,  0.1012],
        [-0.3602, -0.3221,  0.4221,  ...,  0.2693, -0.6436,  0.0974]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [ 64,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        ...,
        [101,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：7



Epoch: 1 batch index: 7/342 loss = 3.080028 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0039, -0.3166,  0.7107,  ...,  0.0219, -0.3522,  0.0635],
        [-0.0409, -0.3979,  0.6858,  ...,  0.0686, -0.4456,  0.2616],
        [-0.1200, -0.3691,  0.5920,  ...,  0.1354, -0.5238,  0.2031],
        ...,
        [-0.4115, -0.2958,  0.5836,  ...,  0.0331, -0.7150,  0.1723],
        [-0.4940, -0.3194,  0.5625,  ...,  0.0984, -0.6590,  0.1687],
        [-0.4793, -0.3569,  0.5235,  ...,  0.0969, -0.6196,  0.1915]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        ...,
        [128,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：8



Epoch: 1 batch index: 8/342 loss = 2.897057 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0530, -0.2196,  0.6046,  ..., -0.1005, -0.3549,  0.0646],
        [-0.1151, -0.2068,  0.4171,  ..., -0.1413, -0.6099,  0.1749],
        [-0.1052, -0.2649,  0.5831,  ...,  0.1292, -0.6732,  0.1723],
        ...,
        [-0.2671, -0.3544,  0.6777,  ...,  0.0037, -0.6208,  0.3880],
        [-0.2680, -0.3573,  0.6840,  ..., -0.0525, -0.6989,  0.4956],
        [-0.1865, -0.4275,  0.6732,  ..., -0.0357, -0.5907,  0.4954]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [128,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：9



Epoch: 1 batch index: 9/342 loss = 2.462485 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.1350, -0.1956,  0.6628,  ..., -0.2339, -0.3176,  0.0832],
        [ 0.1727, -0.1234,  0.3874,  ...,  0.1053, -0.6239,  0.2891],
        [-0.0405, -0.3236,  0.4556,  ...,  0.0980, -0.5983,  0.1664],
        ...,
        [-0.2824, -0.3536,  0.6220,  ...,  0.0615, -0.5606,  0.1612],
        [-0.2631, -0.3434,  0.5436,  ...,  0.0307, -0.5804,  0.2056],
        [-0.2975, -0.3358,  0.5413,  ...,  0.0111, -0.6007,  0.2238]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[100,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 89,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 45,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：10



Epoch: 1 batch index: 10/342 loss = 2.922042 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0613, -0.3333,  0.6794,  ..., -0.1790, -0.4648,  0.1275],
        [ 0.0529, -0.2796,  0.6952,  ..., -0.1500, -0.6202,  0.3066],
        [-0.0139, -0.4705,  0.5595,  ..., -0.0025, -0.8424,  0.2857],
        ...,
        [-0.0870, -0.4603,  0.5139,  ...,  0.0108, -0.4800,  0.0970],
        [-0.0965, -0.5209,  0.4575,  ..., -0.0011, -0.4144,  0.1786],
        [-0.1786, -0.4180,  0.4930,  ..., -0.0453, -0.5061,  0.1500]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 47,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        ...,
        [136,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [120,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：11



Epoch: 1 batch index: 11/342 loss = 3.017013 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0840, -0.3544,  0.6638,  ..., -0.2768, -0.5198,  0.1435],
        [-0.0536, -0.3969,  0.5276,  ..., -0.1787, -0.5479,  0.2241],
        [ 0.0407, -0.5690,  0.4789,  ..., -0.0329, -0.8781,  0.2931],
        ...,
        [-0.1277, -0.5158,  0.6114,  ...,  0.0009, -0.6746,  0.2107],
        [-0.1098, -0.3770,  0.6426,  ..., -0.0849, -0.7709,  0.3058],
        [-0.1701, -0.4620,  0.7140,  ..., -0.0541, -0.6738,  0.3344]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 47,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：12



Epoch: 1 batch index: 12/342 loss = 2.570107 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0951, -0.3574,  0.5996,  ..., -0.3529, -0.4241,  0.1082],
        [-0.1008, -0.4077,  0.2791,  ..., -0.4094, -0.7589,  0.1623],
        [-0.1814, -0.4706,  0.4457,  ..., -0.0465, -0.6920,  0.1527],
        ...,
        [-0.1329, -0.3978,  0.6637,  ..., -0.1198, -0.7513,  0.1959],
        [-0.1644, -0.4379,  0.6608,  ..., -0.1287, -0.7344,  0.2430],
        [-0.1576, -0.4454,  0.7435,  ..., -0.0905, -0.7141,  0.1978]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 73,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 86,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：13



Epoch: 1 batch index: 13/342 loss = 2.595544 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.1264, -0.2659,  0.6512,  ..., -0.5490, -0.2904,  0.1198],
        [ 0.0217, -0.4936,  0.8115,  ..., -0.4997, -0.4092,  0.3861],
        [-0.0689, -0.3096,  0.5065,  ..., -0.2521, -0.6473,  0.3214],
        ...,
        [-0.1330, -0.4181,  0.5478,  ..., -0.2637, -0.5792,  0.2063],
        [-0.1345, -0.3558,  0.5532,  ..., -0.3085, -0.6668,  0.1328],
        [-0.1421, -0.3758,  0.6113,  ..., -0.4611, -0.5691,  0.1353]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([100], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 86,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：14



Epoch: 1 batch index: 14/342 loss = 2.486678 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0685, -0.1993,  0.6808,  ..., -0.6796, -0.3045,  0.0836],
        [-0.0266, -0.2448,  0.6897,  ..., -0.4821, -0.4100,  0.2661],
        [-0.1433, -0.3860,  0.6041,  ..., -0.4936, -0.7262,  0.3460],
        ...,
        [-0.4247, -0.3778,  0.5667,  ..., -0.3865, -0.6129,  0.2371],
        [-0.3678, -0.4055,  0.5007,  ..., -0.3257, -0.5742,  0.1867],
        [-0.3402, -0.4649,  0.4616,  ..., -0.3092, -0.5681,  0.2664]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([94], device='cuda:0')
decoder的输出结果为： tensor([[47, 25,  0,  ...,  0,  0,  0],
        [67, 25,  0,  ...,  0,  0,  0],
        [87, 25,  0,  ...,  0,  0,  0],
        ...,
        [63, 25,  0,  ...,  0,  0,  0],
        [91, 25,  0,  ...,  0,  0,  0],
        [89, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：0，总数：15



Epoch: 1 batch index: 15/342 loss = 2.139341 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.0565, -0.0888,  0.6966,  ..., -0.7039, -0.2028,  0.1545],
        [ 0.1765, -0.2659,  0.9082,  ..., -0.8646, -0.6036,  0.2170],
        [-0.1248, -0.1318,  0.5761,  ..., -0.4295, -0.6706,  0.3348],
        ...,
        [-0.2452, -0.3209,  0.5482,  ..., -0.4135, -0.5996,  0.1572],
        [-0.1900, -0.2748,  0.7161,  ..., -0.4596, -0.5828,  0.1893],
        [-0.2473, -0.2920,  0.5627,  ..., -0.5043, -0.4994,  0.2708]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([25, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([25], device='cuda:0')
decoder的输出结果为： tensor([[129,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：16



Epoch: 1 batch index: 16/342 loss = 1.989397 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0274,  0.0023,  0.6918,  ..., -0.7806, -0.1761, -0.0206],
        [-0.4811, -0.1234,  0.5023,  ..., -0.6605, -0.3298,  0.4878],
        [-0.2694, -0.1674,  0.3376,  ..., -0.2960, -0.7718,  0.4421],
        ...,
        [-0.5791, -0.2082,  0.5949,  ..., -0.4800, -0.5423,  0.1503],
        [-0.5674, -0.2012,  0.6014,  ..., -0.5450, -0.5634,  0.2648],
        [-0.4698, -0.2398,  0.4848,  ..., -0.4120, -0.6097,  0.3460]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([85], device='cuda:0')
decoder的输出结果为： tensor([[161,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [ 68,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：17



Epoch: 1 batch index: 17/342 loss = 2.666954 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 2.7709e-02,  1.2176e-01,  6.6566e-01,  ..., -8.9331e-01,
         -1.5121e-01,  2.1808e-01],
        [-3.3951e-01,  1.8248e-01,  3.1246e-01,  ..., -6.1840e-01,
         -6.9001e-01,  1.9377e-01],
        [-3.3514e-01, -5.7042e-04,  3.7092e-01,  ..., -5.0062e-01,
         -6.9059e-01,  4.8098e-01],
        ...,
        [-4.8628e-01, -2.7358e-01,  1.4714e-01,  ..., -4.7535e-01,
         -6.2896e-01,  3.1002e-01],
        [-5.4741e-01, -1.9649e-01,  1.3127e-01,  ..., -4.5981e-01,
         -5.2320e-01,  3.1050e-01],
        [-4.3175e-01, -1.1442e-01,  2.8202e-01,  ..., -6.2110e-01,
         -5.9270e-01,  3.4171e-01]], device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([85], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：18



Epoch: 1 batch index: 18/342 loss = 2.137072 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.0170,  0.0718,  0.5194,  ..., -1.0008, -0.1509,  0.1286],
        [-0.3438, -0.1708,  0.3757,  ..., -0.9489, -0.4944,  0.7368],
        [-0.2814, -0.2302,  0.3994,  ..., -0.3634, -0.6971,  0.4793],
        ...,
        [-0.5609, -0.0510,  0.3469,  ..., -0.4925, -0.6005,  0.4241],
        [-0.5370,  0.0136,  0.4484,  ..., -0.5427, -0.7089,  0.4090],
        [-0.5696, -0.0854,  0.3393,  ..., -0.5878, -0.5378,  0.4522]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        ...,
        [111,  25,   0,  ...,   0,   0,   0],
        [111,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：19



Epoch: 1 batch index: 19/342 loss = 2.057917 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.0263,  0.2126,  0.4553,  ..., -0.9664,  0.0102,  0.2834],
        [-0.2559,  0.2092,  0.6051,  ..., -0.5464, -0.3951,  0.9062],
        [-0.4328, -0.0924,  0.5908,  ..., -0.3422, -0.5611,  0.5835],
        ...,
        [-0.5245, -0.1036,  0.3999,  ..., -0.4727, -0.5350,  0.3888],
        [-0.5246, -0.2268,  0.3441,  ..., -0.5677, -0.5384,  0.3409],
        [-0.5416, -0.1628,  0.3467,  ..., -0.5310, -0.5887,  0.3476]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 95,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：0，总数：20



Epoch: 1 batch index: 20/342 loss = 1.871147 acc: 0.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.0857,  0.1205,  0.6614,  ..., -0.7629,  0.1116,  0.2429],
        [-0.1368,  0.0794,  0.5435,  ..., -0.5652, -0.3391,  0.2864],
        [-0.2687, -0.1139,  0.4170,  ..., -0.3953, -0.5639,  0.4857],
        ...,
        [-0.3994, -0.0409,  0.4890,  ..., -0.4727, -0.4274,  0.3107],
        [-0.2717, -0.0746,  0.4140,  ..., -0.5077, -0.4163,  0.3876],
        [-0.3789, -0.0286,  0.4687,  ..., -0.4614, -0.3050,  0.4035]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 47,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [113,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        [111,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：21



Epoch: 1 batch index: 21/342 loss = 2.041821 acc: 4.761904761904762 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.0511,  0.1011,  0.4372,  ..., -0.7030,  0.0486,  0.2597],
        [-0.1767, -0.1458,  0.2346,  ..., -0.3898, -0.6055,  0.3153],
        [-0.3921, -0.1417, -0.0167,  ..., -0.3071, -0.5803,  0.2980],
        ...,
        [-0.3697, -0.2293,  0.3506,  ..., -0.2781, -0.6057,  0.3842],
        [-0.4666, -0.2200,  0.3850,  ..., -0.3585, -0.7813,  0.2977],
        [-0.3978, -0.2520,  0.3056,  ..., -0.3046, -0.5961,  0.4159]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 86,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [146,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：22



Epoch: 1 batch index: 22/342 loss = 2.374901 acc: 4.545454545454546 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.1906,  0.1423,  0.3752,  ..., -0.7889,  0.0729,  0.0578],
        [-0.1401,  0.3450,  0.2255,  ..., -0.2125, -0.4716,  0.5033],
        [-0.2153,  0.1487,  0.0896,  ..., -0.0992, -0.5396,  0.3082],
        ...,
        [-0.1291, -0.2830,  0.3928,  ..., -0.1952, -0.6141,  0.5403],
        [-0.1251, -0.1670,  0.3502,  ..., -0.2440, -0.6218,  0.4924],
        [-0.2141, -0.3596,  0.3158,  ..., -0.2747, -0.5415,  0.3244]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 85,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        ...,
        [103,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：23



Epoch: 1 batch index: 23/342 loss = 2.294195 acc: 4.3478260869565215 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.2885,  0.2747,  0.3286,  ..., -0.6571,  0.0377,  0.0728],
        [ 0.1077,  0.2785,  0.2452,  ..., -0.3250, -0.3997,  0.4847],
        [-0.0455,  0.1045,  0.0585,  ..., -0.0879, -0.6092,  0.4570],
        ...,
        [-0.1224,  0.0377,  0.0955,  ..., -0.5338, -0.5219,  0.2352],
        [-0.1146, -0.0850,  0.0827,  ..., -0.5344, -0.6182,  0.2654],
        [-0.1128, -0.0870,  0.1193,  ..., -0.5051, -0.6778,  0.3379]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[140,  25,   0,  ...,   0,   0,   0],
        [ 95,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [129,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [129,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：24



Epoch: 1 batch index: 24/342 loss = 2.536312 acc: 4.166666666666666 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.6098,  0.2156,  0.4719,  ..., -0.7062, -0.1254,  0.3765],
        [ 0.2451, -0.0290,  0.0852,  ..., -0.4583, -0.3252,  0.0648],
        [-0.0751,  0.0106,  0.0023,  ..., -0.1299, -0.8490,  0.5275],
        ...,
        [-0.2169, -0.0961,  0.1316,  ..., -0.4335, -0.8496,  0.2913],
        [-0.2122, -0.0929,  0.1009,  ..., -0.4466, -0.6435,  0.4727],
        [-0.0954, -0.0656,  0.2306,  ..., -0.4937, -0.6835,  0.3297]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 64,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：25



Epoch: 1 batch index: 25/342 loss = 1.903318 acc: 4.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.3823,  0.2262,  0.2904,  ..., -0.7751, -0.1963,  0.1441],
        [ 0.0809,  0.4894,  0.1290,  ..., -0.4142, -0.8436,  0.3343],
        [-0.1356, -0.0436, -0.2239,  ..., -0.0639, -0.8118,  0.4394],
        ...,
        [-0.1005,  0.1128, -0.0774,  ..., -0.4095, -0.6001,  0.4360],
        [-0.0431,  0.0874,  0.0258,  ..., -0.2412, -0.6692,  0.4890],
        [-0.1848,  0.1176,  0.0140,  ..., -0.3629, -0.7409,  0.6105]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[87, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0],
        [67, 25,  0,  ...,  0,  0,  0],
        ...,
        [87, 25,  0,  ...,  0,  0,  0],
        [85, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：1，总数：26



Epoch: 1 batch index: 26/342 loss = 2.127897 acc: 3.8461538461538463 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.4027,  0.2688,  0.1926,  ..., -0.7584, -0.0834,  0.2743],
        [ 0.3275,  0.2493, -0.3490,  ..., -0.3220, -0.7022,  0.7748],
        [-0.0695,  0.0897, -0.1648,  ..., -0.3228, -0.8736,  0.4620],
        ...,
        [-0.2068, -0.1438,  0.0859,  ..., -0.2884, -0.4960,  0.2600],
        [-0.3163, -0.0580,  0.0017,  ..., -0.4172, -0.5378,  0.3296],
        [-0.3361, -0.0505, -0.0117,  ..., -0.4702, -0.4990,  0.4249]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[100,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 86,  25,   0,  ...,   0,   0,   0],
        ...,
        [101,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [111,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：27



Epoch: 1 batch index: 27/342 loss = 2.487965 acc: 3.7037037037037033 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.2266,  0.1833,  0.2916,  ..., -0.7841,  0.0304,  0.3272],
        [-0.1271,  0.0452, -0.0226,  ..., -0.3081, -0.2514,  0.0915],
        [-0.2814, -0.0017, -0.0460,  ..., -0.2537, -0.6216,  0.5705],
        ...,
        [-0.3122,  0.0392, -0.0834,  ..., -0.4707, -0.8160,  0.4184],
        [-0.2655, -0.0562, -0.1392,  ..., -0.4217, -0.8699,  0.3663],
        [-0.3733, -0.0114, -0.0832,  ..., -0.4752, -0.8407,  0.3821]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 64,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [142,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：28



Epoch: 1 batch index: 28/342 loss = 1.843782 acc: 3.571428571428571 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[ 0.2779,  0.2776, -0.0586,  ..., -0.7164, -0.2981,  0.2682],
        [-0.1768,  0.1075, -0.1975,  ..., -0.4076, -0.1854,  0.4850],
        [-0.1284, -0.0135, -0.3718,  ..., -0.2964, -0.7084,  0.4154],
        ...,
        [-0.2324,  0.0422, -0.0955,  ..., -0.3400, -0.8006,  0.3983],
        [-0.2315,  0.1365, -0.1349,  ..., -0.2208, -0.9057,  0.2569],
        [-0.2609,  0.0544, -0.1698,  ..., -0.3847, -0.8205,  0.4524]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 65,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [111,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：1，总数：29



Epoch: 1 batch index: 29/342 loss = 2.695324 acc: 3.4482758620689653 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1198,  0.2409,  0.0037,  ..., -0.5662, -0.1650,  0.2543],
        [-0.3117,  0.0765,  0.1794,  ..., -0.3251, -0.7049,  0.5375],
        [-0.3727,  0.2473, -0.1564,  ..., -0.1125, -0.8310,  0.6150],
        ...,
        [-0.3923,  0.2163, -0.2400,  ..., -0.3378, -0.6118,  0.5115],
        [-0.4597,  0.2580, -0.2859,  ..., -0.3740, -0.7343,  0.4248],
        [-0.4181,  0.2553, -0.3584,  ..., -0.4002, -0.6451,  0.5803]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：30



Epoch: 1 batch index: 30/342 loss = 1.905447 acc: 6.666666666666667 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1446,  0.3673,  0.0841,  ..., -0.6356, -0.4130,  0.0280],
        [-0.1839,  0.1696, -0.2078,  ..., -0.2468, -0.8127,  0.4742],
        [-0.3889,  0.2504, -0.1659,  ..., -0.2106, -1.0556,  0.2965],
        ...,
        [-0.5524,  0.0672, -0.1812,  ..., -0.2693, -0.5997,  0.3681],
        [-0.5203,  0.1054, -0.2471,  ..., -0.2984, -0.7629,  0.4271],
        [-0.4634,  0.0400, -0.3382,  ..., -0.4108, -0.6633,  0.3859]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 94,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：31



Epoch: 1 batch index: 31/342 loss = 1.997211 acc: 6.451612903225806 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2599,  0.1996, -0.0594,  ..., -0.5103, -0.3354,  0.1756],
        [-0.2448,  0.4175, -0.4399,  ..., -0.1555, -0.7688,  0.6447],
        [-0.4977,  0.0667, -0.3001,  ..., -0.0647, -0.8461,  0.4846],
        ...,
        [-0.5235,  0.1642, -0.2117,  ..., -0.1809, -0.9097,  0.3257],
        [-0.5366,  0.2247, -0.1312,  ..., -0.1749, -0.7849,  0.3020],
        [-0.5620,  0.2416, -0.1140,  ..., -0.2211, -0.8992,  0.3546]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[100,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [140,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：32



Epoch: 1 batch index: 32/342 loss = 2.207129 acc: 6.25 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1629,  0.1378,  0.0805,  ..., -0.5319, -0.3651,  0.2424],
        [-0.3242,  0.2212, -0.2774,  ..., -0.1211, -0.5452,  0.5596],
        [-0.5577,  0.0653, -0.1926,  ..., -0.1283, -1.0480,  0.5152],
        ...,
        [-0.8428,  0.1494, -0.1111,  ..., -0.0718, -0.9465,  0.4747],
        [-0.7040,  0.1900, -0.2119,  ..., -0.1989, -0.8638,  0.4630],
        [-0.8347,  0.2024, -0.1783,  ..., -0.2201, -0.7913,  0.5156]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[131,  25,   0,  ...,   0,   0,   0],
        [134,  25,   0,  ...,   0,   0,   0],
        [ 64,  25,   0,  ...,   0,   0,   0],
        ...,
        [141,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [154,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：33



Epoch: 1 batch index: 33/342 loss = 2.277197 acc: 6.0606060606060606 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2854,  0.1352,  0.0870,  ..., -0.4922, -0.4038,  0.2003],
        [-0.0139, -0.0442,  0.3887,  ..., -0.5809, -0.9308,  0.3472],
        [-0.4494, -0.0741, -0.1412,  ..., -0.1102, -1.1250,  0.5165],
        ...,
        [-0.8053, -0.0646, -0.0678,  ..., -0.1317, -0.9070,  0.2555],
        [-0.7346, -0.1939, -0.1847,  ..., -0.1395, -0.8517,  0.2395],
        [-0.7043, -0.2267, -0.1450,  ..., -0.1907, -0.8170,  0.3246]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[129,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：34



Epoch: 1 batch index: 34/342 loss = 2.228310 acc: 5.88235294117647 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4251,  0.0448,  0.2001,  ..., -0.6200, -0.4162,  0.1447],
        [-0.5456, -0.0438,  0.1526,  ..., -0.1980, -0.7752,  0.4586],
        [-0.5890, -0.0954,  0.1005,  ...,  0.0147, -0.9517,  0.5289],
        ...,
        [-0.7595, -0.0916, -0.0961,  ..., -0.2481, -0.9740,  0.3843],
        [-0.6256, -0.1629, -0.1359,  ..., -0.3016, -0.8529,  0.4586],
        [-0.7056, -0.1739, -0.2299,  ..., -0.2789, -0.9019,  0.4513]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([85], device='cuda:0')
decoder的输出结果为： tensor([[135,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [111,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：35



Epoch: 1 batch index: 35/342 loss = 2.099607 acc: 5.714285714285714 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5160, -0.0866,  0.1245,  ..., -0.4660, -0.4345,  0.0844],
        [-0.6449, -0.2115,  0.1476,  ..., -0.4557, -0.9029,  0.5890],
        [-0.7060, -0.2127, -0.0621,  ...,  0.0794, -1.0490,  0.4250],
        ...,
        [-0.8603, -0.1802, -0.1571,  ..., -0.3450, -0.8716,  0.3933],
        [-0.8923, -0.1887, -0.1456,  ..., -0.3114, -0.9128,  0.3366],
        [-0.8769, -0.1814, -0.2755,  ..., -0.2757, -0.9392,  0.3447]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [126,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：36



Epoch: 1 batch index: 36/342 loss = 1.818663 acc: 5.555555555555555 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3977, -0.1815,  0.1072,  ..., -0.5273, -0.3817,  0.1228],
        [-0.6802, -0.0539, -0.0361,  ..., -0.2689, -0.8052,  0.5853],
        [-0.7248, -0.1664, -0.1101,  ..., -0.1219, -0.9986,  0.4202],
        ...,
        [-0.7567, -0.3789, -0.0176,  ..., -0.1755, -0.9974,  0.2891],
        [-0.7314, -0.4718, -0.0598,  ..., -0.1749, -0.9834,  0.3041],
        [-0.6922, -0.3407, -0.0583,  ..., -0.1742, -0.9973,  0.2704]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [136,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：37



Epoch: 1 batch index: 37/342 loss = 1.877138 acc: 5.405405405405405 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4339, -0.1099,  0.1104,  ..., -0.6136, -0.2106,  0.2504],
        [-0.5646, -0.0734, -0.1329,  ..., -0.0410, -0.5339,  0.4211],
        [-0.7715, -0.3678, -0.0895,  ...,  0.1125, -0.9720,  0.5643],
        ...,
        [-0.7763, -0.3470,  0.0546,  ..., -0.1677, -0.9342,  0.4688],
        [-0.8209, -0.3587, -0.0214,  ..., -0.1089, -0.9617,  0.3721],
        [-0.9254, -0.3878, -0.0898,  ..., -0.2288, -0.8722,  0.4215]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[131,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：38



Epoch: 1 batch index: 38/342 loss = 2.271640 acc: 5.263157894736842 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-4.4206e-01,  3.7387e-04,  1.3534e-01,  ..., -4.8176e-01,
         -4.0443e-01,  1.0176e-01],
        [-6.3674e-01, -2.5934e-01, -4.8407e-02,  ..., -2.7712e-02,
         -8.0900e-01,  5.5728e-01],
        [-6.9544e-01, -1.2915e-01,  7.0664e-02,  ..., -1.4699e-01,
         -8.6597e-01,  6.0766e-01],
        ...,
        [-8.6663e-01, -3.7556e-01,  2.0744e-02,  ..., -1.1707e-01,
         -1.0199e+00,  3.3719e-01],
        [-7.7275e-01, -2.0266e-01,  6.9347e-02,  ..., -5.6175e-02,
         -1.0092e+00,  2.5527e-01],
        [-8.1750e-01, -2.5687e-01,  7.4032e-02,  ..., -8.4585e-02,
         -9.4217e-01,  4.5318e-01]], device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[96, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0],
        [91, 25,  0,  ...,  0,  0,  0],
        ...,
        [24, 25,  0,  ...,  0,  0,  0],
        [62, 25,  0,  ...,  0,  0,  0],
        [64, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：2，总数：39



Epoch: 1 batch index: 39/342 loss = 1.994102 acc: 5.128205128205128 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3486,  0.0369,  0.2448,  ..., -0.6109, -0.3286,  0.1181],
        [-0.2625,  0.0367,  0.2180,  ..., -0.2822, -0.8222,  0.8775],
        [-0.5120, -0.2067,  0.1575,  ..., -0.0440, -1.0292,  0.5786],
        ...,
        [-0.7422, -0.3428, -0.1905,  ..., -0.0984, -0.9871,  0.3344],
        [-0.7741, -0.2671, -0.1643,  ..., -0.1073, -0.8417,  0.4180],
        [-0.8190, -0.3042, -0.1490,  ..., -0.2145, -0.8912,  0.3596]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        ...,
        [128,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [113,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：40



Epoch: 1 batch index: 40/342 loss = 1.904050 acc: 5.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3725, -0.0532,  0.0664,  ..., -0.5377, -0.2637,  0.2237],
        [-0.8310, -0.0771,  0.0089,  ..., -0.4416, -0.6217,  0.5573],
        [-0.7349, -0.1130, -0.0933,  ..., -0.1566, -0.8924,  0.4969],
        ...,
        [-0.7857, -0.1366, -0.0491,  ..., -0.3817, -0.9509,  0.3010],
        [-0.7292, -0.0638, -0.0785,  ..., -0.4095, -0.9363,  0.2600],
        [-0.6980, -0.2503, -0.0518,  ..., -0.3175, -0.8698,  0.3371]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：41



Epoch: 1 batch index: 41/342 loss = 2.029327 acc: 4.878048780487805 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3435,  0.0152,  0.1713,  ..., -0.5885, -0.2492, -0.0283],
        [-0.7121, -0.2612, -0.1334,  ..., -0.0700, -0.7693,  0.3803],
        [-0.5552, -0.1040, -0.0564,  ...,  0.0219, -0.9587,  0.3793],
        ...,
        [-0.5998, -0.1985, -0.0496,  ..., -0.0360, -0.9419,  0.2228],
        [-0.7492, -0.1140, -0.0910,  ..., -0.1798, -0.9425,  0.2270],
        [-0.7238, -0.1746, -0.1660,  ..., -0.1469, -0.9456,  0.2098]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[ 45,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 95,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：42



Epoch: 1 batch index: 42/342 loss = 2.111603 acc: 4.761904761904762 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4197, -0.0285,  0.3152,  ..., -0.4387, -0.2297,  0.0515],
        [-0.6842, -0.5203,  0.2036,  ..., -0.2118, -0.6237,  0.2392],
        [-0.7633, -0.3023, -0.1201,  ...,  0.1214, -0.9353,  0.6718],
        ...,
        [-0.8379, -0.2904, -0.0302,  ..., -0.0402, -0.8850,  0.2094],
        [-0.8051, -0.3554, -0.1422,  ..., -0.1188, -0.8738,  0.3609],
        [-0.7933, -0.2256, -0.1017,  ..., -0.1532, -0.8385,  0.3089]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[141,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        ...,
        [113,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：43



Epoch: 1 batch index: 43/342 loss = 2.077051 acc: 4.651162790697675 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4120, -0.0094,  0.2531,  ..., -0.5099, -0.3327, -0.0159],
        [-0.7055, -0.2806,  0.1336,  ..., -0.2192, -0.7655,  0.4886],
        [-0.7301, -0.3344,  0.0811,  ...,  0.1321, -0.8728,  0.4519],
        ...,
        [-0.7224, -0.2011,  0.0092,  ..., -0.3940, -0.6307,  0.1670],
        [-0.7076, -0.2446,  0.0141,  ..., -0.3871, -0.6459,  0.1164],
        [-0.6738, -0.1218,  0.0161,  ..., -0.3416, -0.6271,  0.1941]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([87, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([87, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([87], device='cuda:0')
decoder的输出结果为： tensor([[62, 25,  0,  ...,  0,  0,  0],
        [85, 25,  0,  ...,  0,  0,  0],
        [95, 25,  0,  ...,  0,  0,  0],
        ...,
        [24, 25,  0,  ...,  0,  0,  0],
        [73, 25,  0,  ...,  0,  0,  0],
        [35, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：2，总数：44



Epoch: 1 batch index: 44/342 loss = 2.138066 acc: 4.545454545454546 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5417,  0.1475,  0.1635,  ..., -0.5169, -0.1383,  0.1881],
        [-0.8512,  0.0192, -0.2170,  ...,  0.2864, -0.6084,  0.3997],
        [-0.8936, -0.1034, -0.1861,  ...,  0.1005, -0.8684,  0.5178],
        ...,
        [-0.7669, -0.0973,  0.0533,  ..., -0.2960, -0.8988,  0.1934],
        [-0.7388, -0.1730, -0.0254,  ..., -0.2722, -0.8032,  0.2460],
        [-0.6797, -0.1378,  0.0054,  ..., -0.3349, -0.8009,  0.4178]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[103,  25,   0,  ...,   0,   0,   0],
        [ 64,  25,   0,  ...,   0,   0,   0],
        [138,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 73,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：45



Epoch: 1 batch index: 45/342 loss = 2.039458 acc: 4.444444444444445 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6452,  0.0599,  0.1913,  ..., -0.4212, -0.2417,  0.0084],
        [-0.6864,  0.0558,  0.1603,  ..., -0.2568, -0.7406,  0.3121],
        [-0.7906, -0.0727, -0.1073,  ...,  0.1945, -0.8892,  0.3319],
        ...,
        [-0.9741, -0.2545,  0.0123,  ..., -0.3221, -0.7073,  0.2877],
        [-0.8254, -0.2136,  0.0290,  ..., -0.2984, -0.7516,  0.2924],
        [-0.8844, -0.2199,  0.0342,  ..., -0.2105, -0.7498,  0.3814]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[114,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：46



Epoch: 1 batch index: 46/342 loss = 1.965765 acc: 4.3478260869565215 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5651,  0.0871,  0.0832,  ..., -0.6590,  0.0260,  0.1047],
        [-0.7853,  0.1202, -0.2499,  ..., -0.4244, -0.6352,  0.3374],
        [-0.7374, -0.0099, -0.0944,  ..., -0.1889, -0.8048,  0.4577],
        ...,
        [-0.8243,  0.0384,  0.0143,  ..., -0.2495, -0.7439,  0.2408],
        [-0.8606, -0.0417, -0.0733,  ..., -0.3033, -0.8663,  0.3563],
        [-0.8420, -0.0703, -0.0207,  ..., -0.4209, -0.7385,  0.3148]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [125,  25,   0,  ...,   0,   0,   0],
        [ 48,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：47



Epoch: 1 batch index: 47/342 loss = 2.081524 acc: 4.25531914893617 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6411,  0.1102,  0.0577,  ..., -0.5617, -0.2840,  0.0872],
        [-0.7040,  0.0474, -0.1636,  ..., -0.0368, -0.6059,  0.6866],
        [-0.9386,  0.1065, -0.1754,  ..., -0.1108, -0.7997,  0.5177],
        ...,
        [-1.0557,  0.0442,  0.0299,  ..., -0.2448, -0.8375,  0.3616],
        [-0.9814, -0.0236, -0.0547,  ..., -0.3295, -0.7909,  0.3831],
        [-1.0607, -0.0372, -0.0271,  ..., -0.1936, -0.8502,  0.4423]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 86,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：48



Epoch: 1 batch index: 48/342 loss = 1.900090 acc: 4.166666666666666 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6329,  0.1313,  0.0682,  ..., -0.5787, -0.2873,  0.2020],
        [-0.9506,  0.0029, -0.4110,  ..., -0.5143, -0.7758,  0.5693],
        [-0.8898, -0.1069, -0.3248,  ..., -0.2378, -0.7769,  0.5492],
        ...,
        [-0.8051, -0.0705, -0.2338,  ..., -0.4320, -0.7531,  0.3039],
        [-0.6949, -0.0263, -0.2005,  ..., -0.3878, -0.7428,  0.3908],
        [-0.7928, -0.0938, -0.2372,  ..., -0.4542, -0.8148,  0.3715]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [109,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：49



Epoch: 1 batch index: 49/342 loss = 1.930055 acc: 4.081632653061225 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4933,  0.0303,  0.0152,  ..., -0.6709, -0.2550,  0.0983],
        [-0.8304,  0.0250, -0.2435,  ..., -0.4899, -0.8573,  0.6089],
        [-0.7086, -0.0253, -0.2117,  ..., -0.1748, -0.9341,  0.6204],
        ...,
        [-0.9717,  0.0313, -0.3007,  ..., -0.2198, -0.6415,  0.4178],
        [-0.8754,  0.0396, -0.2193,  ..., -0.1973, -0.6437,  0.4077],
        [-0.8564, -0.0359, -0.1261,  ..., -0.2175, -0.7232,  0.5446]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 91,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：50



Epoch: 1 batch index: 50/342 loss = 2.078603 acc: 4.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4808,  0.0679, -0.0509,  ..., -0.4436, -0.2821,  0.2364],
        [-0.6996, -0.2188, -0.0379,  ..., -0.3302, -0.8931,  0.7342],
        [-0.7000, -0.1253, -0.2825,  ..., -0.0173, -0.9414,  0.5974],
        ...,
        [-0.9390, -0.2354, -0.1385,  ..., -0.2783, -1.0635,  0.5677],
        [-0.9840, -0.2074, -0.1872,  ..., -0.2003, -1.0015,  0.6329],
        [-0.9320, -0.3068, -0.0504,  ..., -0.2240, -1.0360,  0.7129]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：51



Epoch: 1 batch index: 51/342 loss = 2.210380 acc: 3.9215686274509802 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4364,  0.0861,  0.0098,  ..., -0.4089, -0.3917,  0.2623],
        [-0.5414, -0.2706, -0.0660,  ..., -0.1092, -0.9551,  0.5597],
        [-0.6872, -0.2581, -0.3666,  ..., -0.0223, -1.0024,  0.5423],
        ...,
        [-0.8109,  0.0309, -0.1738,  ..., -0.2941, -0.9097,  0.2698],
        [-0.7836, -0.1495, -0.2795,  ..., -0.3238, -0.8166,  0.3817],
        [-0.7264, -0.1245, -0.2202,  ..., -0.2793, -0.8484,  0.3376]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[ 86,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [149,  25,   0,  ...,   0,   0,   0],
        [125,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：52



Epoch: 1 batch index: 52/342 loss = 1.843316 acc: 3.8461538461538463 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4131,  0.0385, -0.0821,  ..., -0.4948, -0.2707,  0.0567],
        [-0.6123,  0.1575, -0.3510,  ..., -0.3394, -0.8509,  0.4345],
        [-0.5812, -0.0205, -0.3949,  ..., -0.1074, -0.9453,  0.3811],
        ...,
        [-0.7807, -0.1435, -0.1513,  ..., -0.0688, -0.9935,  0.5199],
        [-0.8426, -0.1867, -0.3062,  ..., -0.0291, -1.0740,  0.5157],
        [-0.7703, -0.1195, -0.1278,  ..., -0.1449, -0.9726,  0.6852]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[67, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0],
        [91, 25,  0,  ...,  0,  0,  0],
        ...,
        [48, 25,  0,  ...,  0,  0,  0],
        [89, 25,  0,  ...,  0,  0,  0],
        [63, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：2，总数：53



Epoch: 1 batch index: 53/342 loss = 1.941999 acc: 3.7735849056603774 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3975,  0.0378, -0.0716,  ..., -0.5139, -0.2305,  0.0619],
        [-0.5276,  0.0265, -0.1101,  ..., -0.2707, -0.6254,  0.6142],
        [-0.5790, -0.2221, -0.3683,  ..., -0.0870, -0.9264,  0.4968],
        ...,
        [-0.7389, -0.1912, -0.2086,  ..., -0.3620, -0.7914,  0.3997],
        [-0.6473, -0.1729, -0.2248,  ..., -0.3239, -0.7936,  0.4477],
        [-0.6618, -0.2013, -0.2103,  ..., -0.3160, -0.7635,  0.4694]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[ 47,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：54



Epoch: 1 batch index: 54/342 loss = 2.013711 acc: 3.7037037037037033 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3442,  0.1526, -0.2279,  ..., -0.4862, -0.3266,  0.0774],
        [-0.6863,  0.0951, -0.4569,  ..., -0.3792, -0.9048,  0.4324],
        [-0.6418,  0.1111, -0.3577,  ..., -0.2014, -1.1467,  0.3543],
        ...,
        [-0.6458, -0.1781, -0.0586,  ..., -0.2482, -0.8293,  0.4458],
        [-0.7372, -0.1183, -0.0447,  ..., -0.3387, -0.8771,  0.4662],
        [-0.7724, -0.1335, -0.1480,  ..., -0.2906, -0.8232,  0.3560]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 73,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [136,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：55



Epoch: 1 batch index: 55/342 loss = 2.420420 acc: 3.6363636363636362 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3507,  0.0238, -0.0156,  ..., -0.6059, -0.3503,  0.1152],
        [-0.3609, -0.0472, -0.0727,  ..., -0.3600, -0.7637,  0.2465],
        [-0.3750, -0.0295, -0.2658,  ..., -0.0997, -0.9135,  0.5350],
        ...,
        [-0.7328, -0.0841, -0.2063,  ..., -0.2823, -1.0361,  0.5476],
        [-0.7788, -0.1125, -0.2173,  ..., -0.2842, -0.9331,  0.6050],
        [-0.8251, -0.0754, -0.1977,  ..., -0.2553, -1.0553,  0.6152]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[126,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：56



Epoch: 1 batch index: 56/342 loss = 2.314972 acc: 3.571428571428571 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4312,  0.2146,  0.0370,  ..., -0.6608, -0.3016,  0.1450],
        [-0.7399, -0.0194, -0.0774,  ..., -0.6656, -0.8573,  0.1889],
        [-0.6517, -0.1141, -0.2351,  ..., -0.2030, -0.8019,  0.4839],
        ...,
        [-0.7265,  0.0446, -0.3065,  ..., -0.4214, -0.7236,  0.4657],
        [-0.7956,  0.1477, -0.3500,  ..., -0.4020, -0.7638,  0.4181],
        [-0.6253, -0.0033, -0.3516,  ..., -0.3942, -0.8405,  0.5711]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[120,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：57



Epoch: 1 batch index: 57/342 loss = 2.006459 acc: 3.508771929824561 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4161,  0.1712,  0.0729,  ..., -0.8038, -0.2977,  0.2038],
        [-0.4499,  0.0403, -0.2582,  ..., -0.2347, -0.8253,  0.6474],
        [-0.5121,  0.0724, -0.2278,  ..., -0.2761, -0.8715,  0.7346],
        ...,
        [-0.8057,  0.0193, -0.3029,  ..., -0.3123, -0.8274,  0.3333],
        [-0.8873,  0.0105, -0.2687,  ..., -0.3892, -0.8073,  0.4324],
        [-0.8312,  0.0146, -0.1149,  ..., -0.3112, -0.7929,  0.4896]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [133,  25,   0,  ...,   0,   0,   0],
        [ 86,  25,   0,  ...,   0,   0,   0],
        [ 65,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：58



Epoch: 1 batch index: 58/342 loss = 2.700626 acc: 3.4482758620689653 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4567,  0.0842,  0.1088,  ..., -0.6855, -0.2878,  0.0757],
        [-0.4430, -0.0909, -0.2276,  ..., -0.1921, -0.8929,  0.6089],
        [-0.6030,  0.0170, -0.2115,  ..., -0.2935, -0.8678,  0.6860],
        ...,
        [-0.6971, -0.1886, -0.1677,  ..., -0.3116, -0.8091,  0.3986],
        [-0.7590, -0.1171, -0.2510,  ..., -0.3281, -0.9392,  0.3907],
        [-0.6790, -0.1988, -0.1774,  ..., -0.3300, -0.9422,  0.3982]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 94,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [113,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [125,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：2，总数：59



Epoch: 1 batch index: 59/342 loss = 1.843417 acc: 3.389830508474576 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3906,  0.0957,  0.1615,  ..., -0.5881, -0.3644,  0.0037],
        [-0.4817, -0.1556,  0.2378,  ..., -0.4404, -0.8323,  0.6109],
        [-0.7721, -0.0053, -0.1856,  ..., -0.1904, -0.8801,  0.4863],
        ...,
        [-0.7346, -0.1310,  0.0988,  ..., -0.3913, -0.8774,  0.4929],
        [-0.8185, -0.0538,  0.0635,  ..., -0.3947, -0.9477,  0.6007],
        [-0.8503, -0.1820, -0.0030,  ..., -0.3110, -0.8405,  0.6074]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([94], device='cuda:0')
decoder的输出结果为： tensor([[24, 25,  0,  ...,  0,  0,  0],
        [75, 25,  0,  ...,  0,  0,  0],
        [47, 25,  0,  ...,  0,  0,  0],
        ...,
        [92, 25,  0,  ...,  0,  0,  0],
        [94, 25,  0,  ...,  0,  0,  0],
        [94, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：2，总数：60



Epoch: 1 batch index: 60/342 loss = 1.916268 acc: 3.3333333333333335 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6151, -0.0839,  0.1684,  ..., -0.6334, -0.3305,  0.0933],
        [-0.6670, -0.2412, -0.1882,  ..., -0.2070, -0.7792,  0.7446],
        [-0.8103, -0.2632, -0.1783,  ..., -0.2067, -0.9848,  0.7295],
        ...,
        [-0.9646, -0.2438, -0.0392,  ..., -0.2237, -1.0177,  0.4269],
        [-0.8595, -0.3136, -0.1386,  ..., -0.3218, -1.0183,  0.5389],
        [-0.8699, -0.3105, -0.1393,  ..., -0.2841, -0.9523,  0.4414]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([94], device='cuda:0')
decoder的输出结果为： tensor([[ 94,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [114,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：61



Epoch: 1 batch index: 61/342 loss = 1.842007 acc: 4.918032786885246 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5059, -0.1775,  0.1342,  ..., -0.6276, -0.4237,  0.1001],
        [-0.5964, -0.4906,  0.0954,  ..., -0.2551, -0.8519,  0.6149],
        [-0.7011, -0.2834, -0.1116,  ..., -0.0235, -0.9670,  0.4590],
        ...,
        [-0.8912, -0.2910,  0.0128,  ..., -0.2419, -1.2686,  0.5678],
        [-0.9179, -0.2965,  0.0146,  ..., -0.2389, -1.1575,  0.4998],
        [-0.8909, -0.3222, -0.1466,  ..., -0.2729, -1.0604,  0.4867]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([94], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        [120,  25,   0,  ...,   0,   0,   0],
        ...,
        [106,  25,   0,  ...,   0,   0,   0],
        [ 35,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：62



Epoch: 1 batch index: 62/342 loss = 2.181067 acc: 4.838709677419355 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4759, -0.2010,  0.0365,  ..., -0.6639, -0.4044,  0.0147],
        [-0.7356, -0.1063, -0.4039,  ..., -0.4678, -1.0536,  0.4803],
        [-0.8015, -0.3089, -0.3112,  ..., -0.2765, -1.1064,  0.5849],
        ...,
        [-1.0502, -0.2173, -0.1841,  ..., -0.3069, -1.0589,  0.4894],
        [-0.9272, -0.3419, -0.1524,  ..., -0.2556, -0.9305,  0.4491],
        [-1.0086, -0.3355, -0.1949,  ..., -0.2491, -0.9760,  0.5453]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([94], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：63



Epoch: 1 batch index: 63/342 loss = 2.208894 acc: 4.761904761904762 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5622, -0.1944, -0.0045,  ..., -0.4721, -0.5972, -0.0677],
        [-0.6747, -0.1403, -0.0336,  ..., -0.1068, -0.9843,  0.8601],
        [-0.9652, -0.3082, -0.1092,  ...,  0.1218, -1.2834,  0.5771],
        ...,
        [-1.0549, -0.3112,  0.0484,  ..., -0.1361, -1.2338,  0.3798],
        [-1.0198, -0.3420,  0.0305,  ..., -0.1328, -1.3024,  0.5039],
        [-1.0152, -0.3748,  0.0531,  ..., -0.2465, -1.2076,  0.4305]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [114,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 64,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：64



Epoch: 1 batch index: 64/342 loss = 2.055224 acc: 4.6875 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5577, -0.3151,  0.0367,  ..., -0.4600, -0.6351,  0.0659],
        [-0.8057, -0.1869, -0.2475,  ..., -0.3623, -0.9975,  0.5167],
        [-0.7351, -0.2463, -0.3452,  ..., -0.1049, -1.3191,  0.4950],
        ...,
        [-0.8230, -0.2773, -0.2528,  ..., -0.0599, -1.0618,  0.4767],
        [-0.9057, -0.1924, -0.3135,  ..., -0.0595, -1.0899,  0.5072],
        [-0.9727, -0.2953, -0.3809,  ..., -0.0912, -0.9987,  0.4662]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        ...,
        [113,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：65



Epoch: 1 batch index: 65/342 loss = 1.861745 acc: 4.615384615384616 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5987, -0.0920, -0.0164,  ..., -0.4559, -0.5818,  0.0831],
        [-0.6499, -0.1944, -0.1675,  ..., -0.0739, -1.1250,  0.6205],
        [-0.8405, -0.0915, -0.2549,  ...,  0.0116, -1.1742,  0.6281],
        ...,
        [-0.8974, -0.2034, -0.1959,  ..., -0.2143, -1.4317,  0.3139],
        [-0.8901, -0.2892, -0.2728,  ..., -0.0608, -1.1807,  0.2889],
        [-0.8831, -0.2908, -0.1266,  ..., -0.1502, -1.3365,  0.3219]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [133,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：66



Epoch: 1 batch index: 66/342 loss = 2.061917 acc: 4.545454545454546 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5673, -0.0347, -0.0166,  ..., -0.3910, -0.8780,  0.0591],
        [-0.6583, -0.3037, -0.3244,  ...,  0.1691, -1.3003,  0.3711],
        [-0.7537, -0.2200, -0.3787,  ...,  0.1476, -1.4449,  0.5040],
        ...,
        [-1.0603, -0.2681,  0.0230,  ..., -0.1014, -1.2954,  0.2769],
        [-0.9711, -0.2787,  0.0273,  ..., -0.1551, -1.1441,  0.2766],
        [-1.0382, -0.3934,  0.0280,  ..., -0.1369, -1.0865,  0.3300]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[103,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        [ 92,  25,   0,  ...,   0,   0,   0],
        ...,
        [141,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [111,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：67



Epoch: 1 batch index: 67/342 loss = 2.012692 acc: 4.477611940298507 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4759,  0.0253,  0.0613,  ..., -0.5394, -0.6125, -0.0075],
        [-0.5988,  0.1297, -0.3346,  ..., -0.0825, -1.1043,  0.5710],
        [-0.8340,  0.0167, -0.2635,  ..., -0.0727, -1.2556,  0.4755],
        ...,
        [-0.9619, -0.1322, -0.2035,  ..., -0.0991, -1.2092,  0.4502],
        [-0.9382, -0.2066, -0.3880,  ..., -0.1087, -1.1874,  0.4197],
        [-1.0470, -0.2914, -0.2700,  ..., -0.1145, -1.2592,  0.3654]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        ...,
        [111,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：68



Epoch: 1 batch index: 68/342 loss = 2.430788 acc: 4.411764705882353 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6322, -0.0160, -0.0494,  ..., -0.4292, -0.6302,  0.0889],
        [-0.6348, -0.1035, -0.4841,  ..., -0.0344, -1.2182,  0.2187],
        [-0.6969, -0.1147, -0.3464,  ..., -0.1892, -1.4185,  0.4806],
        ...,
        [-1.0112, -0.2794, -0.3425,  ..., -0.0739, -1.2253,  0.1923],
        [-0.8361, -0.2306, -0.3638,  ..., -0.1416, -1.2520,  0.2453],
        [-0.9113, -0.3281, -0.3103,  ..., -0.1581, -1.1554,  0.2906]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[ 63,  25,   0,  ...,   0,   0,   0],
        [ 35,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：69



Epoch: 1 batch index: 69/342 loss = 1.861950 acc: 4.3478260869565215 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5415,  0.0238,  0.0377,  ..., -0.4804, -0.6108,  0.0435],
        [-0.6797, -0.1966,  0.0643,  ..., -0.2902, -1.1423,  0.4728],
        [-0.6667, -0.1835, -0.1825,  ...,  0.0930, -1.2978,  0.4387],
        ...,
        [-0.7750, -0.2393, -0.2353,  ..., -0.1568, -1.2218,  0.3435],
        [-0.8485, -0.1576, -0.1853,  ..., -0.1945, -1.2480,  0.3842],
        [-0.7491, -0.1522, -0.2396,  ..., -0.0398, -1.2577,  0.3791]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([96], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 95,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        ...,
        [140,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：70



Epoch: 1 batch index: 70/342 loss = 2.145833 acc: 4.285714285714286 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5298, -0.0912,  0.2188,  ..., -0.4769, -0.6174,  0.0515],
        [-0.5114, -0.3071, -0.1695,  ...,  0.0553, -1.0700,  0.6003],
        [-0.6508, -0.1780, -0.1219,  ...,  0.0358, -1.2031,  0.4733],
        ...,
        [-0.9033, -0.3605, -0.1546,  ..., -0.0454, -1.0068,  0.3887],
        [-0.9314, -0.3501, -0.1448,  ..., -0.1111, -1.0043,  0.4830],
        [-1.0041, -0.3613, -0.2240,  ..., -0.1008, -0.9336,  0.4659]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([96], device='cuda:0')
decoder的输出结果为： tensor([[ 94,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 50,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：71



Epoch: 1 batch index: 71/342 loss = 2.139453 acc: 4.225352112676056 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5718, -0.0499,  0.1058,  ..., -0.4678, -0.6735,  0.0969],
        [-0.6220,  0.0288,  0.0212,  ..., -0.2203, -1.1238,  0.8649],
        [-0.8483, -0.2607,  0.1542,  ...,  0.0122, -1.3487,  0.5456],
        ...,
        [-0.8869, -0.3383, -0.0688,  ..., -0.1793, -1.1980,  0.2774],
        [-0.8957, -0.3551, -0.0511,  ..., -0.0867, -1.0642,  0.3905],
        [-0.8700, -0.3661,  0.0566,  ..., -0.0895, -1.2087,  0.3658]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([96], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [ 86,  25,   0,  ...,   0,   0,   0],
        [116,  25,   0,  ...,   0,   0,   0],
        ...,
        [109,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：72



Epoch: 1 batch index: 72/342 loss = 2.010296 acc: 4.166666666666666 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5903, -0.1509,  0.2086,  ..., -0.6055, -0.6315, -0.0456],
        [-0.6992, -0.0056,  0.0296,  ..., -0.1570, -1.1631,  0.1211],
        [-0.9311, -0.0916, -0.1126,  ...,  0.0080, -1.1673,  0.3299],
        ...,
        [-0.8059, -0.2162, -0.1342,  ..., -0.1287, -1.2439,  0.2748],
        [-0.9042, -0.2327, -0.1775,  ..., -0.1404, -1.2414,  0.3533],
        [-0.7952, -0.2980, -0.1720,  ..., -0.1627, -1.2407,  0.3018]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([109], device='cuda:0')
decoder的输出结果为： tensor([[ 46,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        ...,
        [156,  25,   0,  ...,   0,   0,   0],
        [ 48,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：73



Epoch: 1 batch index: 73/342 loss = 1.964116 acc: 4.10958904109589 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4331, -0.1343,  0.1455,  ..., -0.5218, -0.4246, -0.0324],
        [-0.7265, -0.3513, -0.0606,  ..., -0.4845, -0.8701,  0.5545],
        [-0.6314, -0.2760, -0.1522,  ...,  0.0749, -1.0183,  0.5783],
        ...,
        [-0.9864, -0.4047,  0.0656,  ..., -0.0474, -1.2103,  0.2149],
        [-1.0044, -0.3847,  0.0109,  ..., -0.1027, -1.2454,  0.1423],
        [-1.0713, -0.4121,  0.0159,  ..., -0.0787, -1.1262,  0.2422]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([85], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [ 64,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 89,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：74



Epoch: 1 batch index: 74/342 loss = 2.118860 acc: 4.054054054054054 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4274, -0.1242,  0.0787,  ..., -0.5955, -0.4624, -0.0550],
        [-0.3857, -0.0692, -0.2541,  ..., -0.0934, -0.9626,  0.4648],
        [-0.6848, -0.1907, -0.2221,  ..., -0.1315, -1.0835,  0.2800],
        ...,
        [-1.0734, -0.4314, -0.0484,  ..., -0.2294, -1.1334,  0.5277],
        [-1.1407, -0.4283, -0.0498,  ..., -0.2199, -1.0016,  0.4296],
        [-1.1352, -0.4679, -0.1120,  ..., -0.3556, -0.8718,  0.5037]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([85], device='cuda:0')
decoder的输出结果为： tensor([[100,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        ...,
        [139,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：75



Epoch: 1 batch index: 75/342 loss = 1.829649 acc: 4.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5849, -0.2433,  0.0948,  ..., -0.5849, -0.4444,  0.0614],
        [-0.8996, -0.2362, -0.1453,  ...,  0.0857, -1.1976,  0.6822],
        [-0.8468, -0.3377, -0.2355,  ..., -0.1518, -1.0398,  0.3998],
        ...,
        [-0.8230, -0.5496,  0.0097,  ..., -0.1323, -0.9487,  0.1751],
        [-0.9224, -0.5509, -0.0253,  ..., -0.0901, -1.0399,  0.2626],
        [-0.8775, -0.5577,  0.0175,  ..., -0.0923, -0.9409,  0.2091]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([85], device='cuda:0')
decoder的输出结果为： tensor([[101,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：76



Epoch: 1 batch index: 76/342 loss = 1.692398 acc: 3.9473684210526314 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5207, -0.1227, -0.0773,  ..., -0.6268, -0.4319, -0.1382],
        [-0.9091, -0.2239, -0.2295,  ..., -0.0665, -1.1070,  0.4789],
        [-0.7396, -0.3997, -0.2137,  ..., -0.2875, -0.9747,  0.3591],
        ...,
        [-0.8219, -0.3059, -0.2436,  ..., -0.1672, -1.0277,  0.3330],
        [-0.7794, -0.2522, -0.1608,  ..., -0.1849, -0.9894,  0.3726],
        [-0.9045, -0.2921, -0.2640,  ..., -0.1670, -1.0010,  0.3554]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[101,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [146,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：77



Epoch: 1 batch index: 77/342 loss = 1.811797 acc: 3.896103896103896 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3392, -0.0662,  0.0290,  ..., -0.6838, -0.2321, -0.2075],
        [-0.7487, -0.3481, -0.0288,  ...,  0.0336, -0.9621,  0.1859],
        [-0.4873, -0.3387, -0.3071,  ...,  0.0510, -0.7603,  0.2062],
        ...,
        [-0.7290, -0.4654, -0.0864,  ..., -0.1529, -0.8193,  0.0019],
        [-0.7811, -0.4157, -0.1763,  ..., -0.0740, -0.8490,  0.0051],
        [-0.8201, -0.4987, -0.1643,  ..., -0.1063, -0.7775,  0.0902]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[132,  25,   0,  ...,   0,   0,   0],
        [ 50,  25,   0,  ...,   0,   0,   0],
        [133,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 99,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：78



Epoch: 1 batch index: 78/342 loss = 2.113994 acc: 3.8461538461538463 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4294, -0.1038,  0.0211,  ..., -0.4969, -0.1864, -0.0819],
        [-0.2504, -0.0749, -0.0329,  ..., -0.2411, -0.7621,  0.0946],
        [-0.4306, -0.0787, -0.3741,  ...,  0.0089, -0.9053,  0.2398],
        ...,
        [-0.8733, -0.3539,  0.0699,  ..., -0.3316, -0.9474,  0.3896],
        [-0.9360, -0.3236,  0.0454,  ..., -0.2191, -1.0325,  0.3610],
        [-0.9373, -0.3448, -0.0540,  ..., -0.2749, -0.9050,  0.4198]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[126,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 48,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：79



Epoch: 1 batch index: 79/342 loss = 2.111931 acc: 3.79746835443038 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3797, -0.0152, -0.0930,  ..., -0.5654, -0.2638, -0.0452],
        [-0.4245,  0.0766, -0.3014,  ..., -0.1627, -0.9448, -0.0986],
        [-0.4756,  0.0046, -0.1453,  ..., -0.1424, -1.0102,  0.3020],
        ...,
        [-0.7859, -0.4797, -0.1670,  ..., -0.0065, -0.9275,  0.2004],
        [-0.7903, -0.4622, -0.1462,  ...,  0.0310, -0.9788,  0.2800],
        [-0.8154, -0.5611, -0.1657,  ..., -0.0689, -0.9089,  0.2928]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 63,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：3，总数：80



Epoch: 1 batch index: 80/342 loss = 1.853319 acc: 3.75 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2845, -0.1658, -0.0505,  ..., -0.6521, -0.2821, -0.0293],
        [-0.3744, -0.3865,  0.0800,  ..., -0.2797, -0.8019,  0.5059],
        [-0.4380, -0.2506, -0.2458,  ..., -0.0708, -0.9909,  0.5225],
        ...,
        [-0.5526, -0.3016, -0.1359,  ..., -0.1732, -0.9263,  0.3626],
        [-0.6885, -0.2892, -0.2373,  ..., -0.1881, -0.9538,  0.4494],
        [-0.6400, -0.3402, -0.2220,  ..., -0.1855, -0.9191,  0.4392]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 35,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：4，总数：81



Epoch: 1 batch index: 81/342 loss = 1.693903 acc: 4.938271604938271 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2411, -0.1951,  0.0026,  ..., -0.5212, -0.2680,  0.0567],
        [-0.3456, -0.3075, -0.0146,  ..., -0.1967, -0.7757,  0.7461],
        [-0.4258, -0.3098, -0.1870,  ...,  0.1449, -1.2078,  0.4256],
        ...,
        [-0.7236, -0.2529, -0.0973,  ...,  0.0019, -0.9735,  0.3715],
        [-0.6312, -0.2915, -0.0433,  ..., -0.0492, -0.9871,  0.1567],
        [-0.6902, -0.2597, -0.1178,  ..., -0.1272, -0.9577,  0.4333]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 95,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：4，总数：82



Epoch: 1 batch index: 82/342 loss = 1.574325 acc: 4.878048780487805 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1702, -0.2420,  0.0090,  ..., -0.5494, -0.3473,  0.0656],
        [-0.3168, -0.5269,  0.0135,  ..., -0.2315, -0.7828,  0.6775],
        [-0.5060, -0.2638, -0.2640,  ..., -0.0630, -0.7920,  0.5117],
        ...,
        [-0.7217, -0.4277, -0.2478,  ..., -0.1962, -0.7730,  0.3383],
        [-0.7291, -0.3311, -0.2784,  ..., -0.2106, -0.8391,  0.4138],
        [-0.7299, -0.3356, -0.2201,  ..., -0.2666, -0.9215,  0.4137]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 89,  25,   0,  ...,   0,   0,   0],
        [129,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：4，总数：83



Epoch: 1 batch index: 83/342 loss = 1.946972 acc: 4.819277108433735 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2750, -0.1692,  0.0227,  ..., -0.5889, -0.3394,  0.0408],
        [-0.2451, -0.1633, -0.3268,  ..., -0.0684, -0.9479,  0.6675],
        [-0.5813, -0.3250, -0.2937,  ...,  0.0165, -0.9733,  0.5683],
        ...,
        [-0.6767, -0.4553,  0.0868,  ..., -0.0978, -0.7809,  0.3335],
        [-0.5793, -0.4995,  0.1242,  ..., -0.1268, -0.9425,  0.3810],
        [-0.7426, -0.5796,  0.0593,  ..., -0.1685, -0.8809,  0.4727]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([63], device='cuda:0')
decoder的输出结果为： tensor([[100,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：4，总数：84



Epoch: 1 batch index: 84/342 loss = 2.107911 acc: 4.761904761904762 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4594, -0.3412,  0.0972,  ..., -0.4849, -0.3019,  0.1368],
        [-0.5116, -0.2871,  0.0104,  ...,  0.0749, -0.9537,  0.6459],
        [-0.5460, -0.3097, -0.1193,  ...,  0.0507, -1.0690,  0.6923],
        ...,
        [-0.6854, -0.5642, -0.2851,  ..., -0.0273, -1.0501,  0.3200],
        [-0.7839, -0.5232, -0.1959,  ..., -0.2175, -0.9724,  0.2602],
        [-0.8617, -0.5341, -0.2623,  ..., -0.1737, -0.9551,  0.4613]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([63], device='cuda:0')
decoder的输出结果为： tensor([[116,  25,   0,  ...,   0,   0,   0],
        [112,  25,   0,  ...,   0,   0,   0],
        [ 35,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [113,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：4，总数：85



Epoch: 1 batch index: 85/342 loss = 2.177883 acc: 4.705882352941177 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2550, -0.2309,  0.0319,  ..., -0.4983, -0.3782,  0.1425],
        [-0.3639, -0.3375,  0.1358,  ..., -0.1693, -0.9373,  0.5971],
        [-0.4255, -0.1581, -0.0669,  ...,  0.0613, -1.1746,  0.5149],
        ...,
        [-0.8477, -0.5170, -0.1239,  ..., -0.0852, -1.0230,  0.6129],
        [-0.8813, -0.4671, -0.0409,  ..., -0.2486, -1.0069,  0.5959],
        [-0.8811, -0.4469, -0.1581,  ..., -0.2296, -1.0074,  0.5497]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        ...,
        [109,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：5，总数：86



Epoch: 1 batch index: 86/342 loss = 1.750910 acc: 5.813953488372093 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2830, -0.3357, -0.0778,  ..., -0.4292, -0.3520,  0.2011],
        [-0.3886, -0.3999, -0.0354,  ..., -0.1770, -0.9379,  0.5983],
        [-0.3851, -0.2665, -0.2852,  ...,  0.1413, -1.0369,  0.5225],
        ...,
        [-0.7934, -0.4620, -0.0122,  ..., -0.0473, -1.2563,  0.3132],
        [-0.7825, -0.4476, -0.0778,  ..., -0.1093, -1.1841,  0.5208],
        [-0.7981, -0.4833, -0.0873,  ..., -0.1211, -1.1307,  0.3770]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        ...,
        [103,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：6，总数：87



Epoch: 1 batch index: 87/342 loss = 1.613741 acc: 6.896551724137931 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4184, -0.3390,  0.0492,  ..., -0.5395, -0.5316,  0.0614],
        [-0.2639, -0.5221,  0.2342,  ..., -0.3847, -1.1503,  0.3275],
        [-0.5361, -0.4592, -0.1494,  ...,  0.0408, -1.3007,  0.3498],
        ...,
        [-0.8412, -0.4376, -0.0585,  ..., -0.1769, -1.1351,  0.4156],
        [-0.8328, -0.4284, -0.1409,  ..., -0.1162, -1.0959,  0.4804],
        [-0.7024, -0.3762, -0.0348,  ..., -0.0946, -1.1700,  0.4148]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([85, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([85], device='cuda:0')
decoder的输出结果为： tensor([[129,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [116,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：6，总数：88



Epoch: 1 batch index: 88/342 loss = 2.030026 acc: 6.8181818181818175 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3306, -0.1340,  0.1911,  ..., -0.5864, -0.4555,  0.0911],
        [-0.3951, -0.4193,  0.0676,  ..., -0.2227, -0.8538,  0.6352],
        [-0.5313, -0.2292, -0.2239,  ...,  0.0951, -1.1805,  0.5568],
        ...,
        [-0.6309, -0.3396,  0.0737,  ...,  0.1253, -1.2095,  0.3811],
        [-0.7081, -0.4614, -0.1420,  ...,  0.0142, -1.1081,  0.4166],
        [-0.7098, -0.4930, -0.0836,  ...,  0.0235, -1.0474,  0.4339]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [139,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：89



Epoch: 1 batch index: 89/342 loss = 1.738563 acc: 7.865168539325842 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4785, -0.1573,  0.0697,  ..., -0.6025, -0.4790, -0.0187],
        [-0.2533, -0.1184, -0.1679,  ..., -0.0033, -0.9353,  0.5726],
        [-0.6436, -0.2993, -0.2711,  ...,  0.0042, -1.0177,  0.4392],
        ...,
        [-0.7091, -0.4428, -0.1213,  ...,  0.0329, -0.9601,  0.2458],
        [-0.8204, -0.5436, -0.1963,  ...,  0.0091, -0.9289,  0.3095],
        [-0.6778, -0.4197, -0.1247,  ...,  0.0148, -0.9412,  0.3661]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[100,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 92,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：90



Epoch: 1 batch index: 90/342 loss = 1.493350 acc: 7.777777777777778 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-4.1826e-01, -2.3792e-01,  1.6431e-01,  ..., -6.8211e-01,
         -4.6624e-01,  3.6766e-02],
        [-6.3343e-01, -3.6221e-01,  1.1744e-01,  ..., -4.4557e-01,
         -1.0199e+00,  6.2664e-01],
        [-4.8702e-01, -3.3825e-01,  1.7282e-01,  ..., -2.4514e-02,
         -1.0832e+00,  5.2943e-01],
        ...,
        [-8.5684e-01, -5.3296e-01, -5.2914e-02,  ...,  1.5033e-01,
         -1.1303e+00,  4.0807e-01],
        [-8.6303e-01, -6.2855e-01,  6.1899e-04,  ...,  7.7779e-02,
         -9.7779e-01,  3.7952e-01],
        [-7.9408e-01, -5.4803e-01, -3.7930e-03,  ...,  1.1362e-01,
         -1.0022e+00,  3.5038e-01]], device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [161,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [137,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：91



Epoch: 1 batch index: 91/342 loss = 2.399449 acc: 7.6923076923076925 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3376, -0.1312,  0.1736,  ..., -0.5465, -0.4651, -0.1715],
        [-0.4854, -0.1109,  0.2242,  ..., -0.2003, -1.0022,  0.7887],
        [-0.7704, -0.2142,  0.1260,  ...,  0.0614, -1.1833,  0.4665],
        ...,
        [-0.8916, -0.3153, -0.0238,  ..., -0.0843, -1.1070,  0.1263],
        [-0.8520, -0.4629, -0.2482,  ..., -0.0246, -1.0742,  0.1330],
        [-0.8537, -0.4180, -0.1162,  ..., -0.2537, -0.9423,  0.1484]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        ...,
        [107,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 92,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：92



Epoch: 1 batch index: 92/342 loss = 1.913067 acc: 7.608695652173914 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3008, -0.1207,  0.1906,  ..., -0.6291, -0.4564, -0.1772],
        [-0.1856, -0.0305,  0.3396,  ..., -0.2684, -0.9482,  0.4315],
        [-0.6392, -0.3951,  0.1533,  ...,  0.1417, -1.1723,  0.3659],
        ...,
        [-0.7343, -0.3732, -0.0063,  ...,  0.0346, -1.3350,  0.3127],
        [-0.8220, -0.4513, -0.0534,  ...,  0.0186, -1.2704,  0.2886],
        [-0.7996, -0.4985, -0.1276,  ...,  0.2311, -1.3166,  0.4092]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[156,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 91,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：93



Epoch: 1 batch index: 93/342 loss = 2.163539 acc: 7.526881720430108 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3635, -0.2204,  0.1598,  ..., -0.4422, -0.6182, -0.0911],
        [-0.4035, -0.3084, -0.2002,  ..., -0.0115, -1.0030,  0.4637],
        [-0.5985, -0.3261, -0.2412,  ..., -0.0043, -1.0657,  0.3529],
        ...,
        [-0.8085, -0.4728, -0.2319,  ..., -0.0430, -1.3344,  0.1408],
        [-0.7258, -0.3246, -0.0649,  ..., -0.0259, -1.3144,  0.1696],
        [-0.7777, -0.4006, -0.1682,  ...,  0.0416, -1.3798,  0.1712]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([103,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([103,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([103], device='cuda:0')
decoder的输出结果为： tensor([[ 94,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [141,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：94



Epoch: 1 batch index: 94/342 loss = 1.986900 acc: 7.446808510638298 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-2.8403e-01, -2.0403e-01,  1.7144e-01,  ..., -5.4026e-01,
         -6.6295e-01, -2.3886e-01],
        [-2.0507e-01, -1.1009e-03, -9.1357e-02,  ...,  6.9839e-02,
         -1.3470e+00, -1.2676e-02],
        [-5.4148e-01, -1.7678e-01, -1.0829e-01,  ...,  1.7483e-01,
         -1.4425e+00,  3.2506e-01],
        ...,
        [-7.4760e-01, -4.0498e-01,  1.6089e-02,  ...,  4.9295e-02,
         -1.0831e+00,  8.6284e-02],
        [-7.0160e-01, -4.7550e-01, -1.3264e-01,  ...,  4.8432e-03,
         -1.1456e+00,  2.1772e-01],
        [-7.1413e-01, -3.8829e-01, -6.9375e-02,  ...,  4.5082e-02,
         -1.0332e+00,  1.3247e-01]], device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([103,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([103,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([103], device='cuda:0')
decoder的输出结果为： tensor([[ 63,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [142,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [137,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：95



Epoch: 1 batch index: 95/342 loss = 1.878500 acc: 7.368421052631578 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3484, -0.2770,  0.0819,  ..., -0.5124, -0.6681, -0.1796],
        [-0.5573, -0.4798, -0.1108,  ..., -0.3522, -1.0316,  0.4973],
        [-0.4949, -0.4670, -0.1521,  ...,  0.1218, -1.2119,  0.2488],
        ...,
        [-0.7331, -0.4218,  0.0212,  ...,  0.0288, -1.3438,  0.0707],
        [-0.7399, -0.3642,  0.0285,  ...,  0.0494, -1.3198,  0.0907],
        [-0.8204, -0.3817,  0.0649,  ..., -0.0405, -1.3523,  0.1286]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([109], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 73,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [ 86,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：96



Epoch: 1 batch index: 96/342 loss = 1.904719 acc: 7.291666666666667 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4218, -0.2347,  0.0619,  ..., -0.4944, -0.7105, -0.1802],
        [-0.4825, -0.2143,  0.0732,  ..., -0.1677, -1.1972,  0.1923],
        [-0.6194, -0.3951, -0.2586,  ...,  0.3247, -1.1701,  0.3379],
        ...,
        [-0.7987, -0.1597, -0.2198,  ..., -0.1347, -1.1228,  0.0774],
        [-0.7160, -0.3359, -0.3543,  ..., -0.1387, -1.1080,  0.1739],
        [-0.7336, -0.2934, -0.2357,  ..., -0.1237, -1.1678,  0.1709]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([109], device='cuda:0')
decoder的输出结果为： tensor([[114,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        [125,  25,   0,  ...,   0,   0,   0],
        ...,
        [126,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：97



Epoch: 1 batch index: 97/342 loss = 2.093265 acc: 7.216494845360824 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4490, -0.2050,  0.0192,  ..., -0.4297, -0.6809, -0.1246],
        [-0.4656, -0.2705, -0.2428,  ...,  0.0943, -1.0624,  0.5725],
        [-0.6719, -0.1413, -0.3038,  ...,  0.0377, -1.2457,  0.4109],
        ...,
        [-0.8597, -0.4647, -0.3179,  ..., -0.0224, -1.2001, -0.0211],
        [-0.8413, -0.4486, -0.3023,  ..., -0.1578, -1.1689, -0.0221],
        [-0.7895, -0.5049, -0.3092,  ..., -0.2525, -1.2372, -0.0883]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [125,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：7，总数：98



Epoch: 1 batch index: 98/342 loss = 1.936713 acc: 7.142857142857142 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5465, -0.3150, -0.0834,  ..., -0.3566, -0.6077, -0.1744],
        [-0.6666, -0.2226, -0.1148,  ..., -0.0629, -1.1782,  0.3816],
        [-0.8379, -0.3327, -0.2524,  ...,  0.2117, -1.3053,  0.3299],
        ...,
        [-0.8845, -0.4378, -0.2047,  ..., -0.0141, -1.2264,  0.1448],
        [-0.7705, -0.5212, -0.2103,  ..., -0.0527, -1.1471,  0.2909],
        [-0.8180, -0.4238, -0.1502,  ..., -0.0585, -1.1608,  0.2591]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[91, 25,  0,  ...,  0,  0,  0],
        [47, 25,  0,  ...,  0,  0,  0],
        [94, 25,  0,  ...,  0,  0,  0],
        ...,
        [96, 25,  0,  ...,  0,  0,  0],
        [67, 25,  0,  ...,  0,  0,  0],
        [96, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：8，总数：99



Epoch: 1 batch index: 99/342 loss = 1.535120 acc: 8.080808080808081 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.8007, -0.4714, -0.0996,  ..., -0.3589, -0.6140, -0.2595],
        [-0.8754, -0.7638,  0.0156,  ..., -0.0597, -0.9168,  0.2645],
        [-0.8545, -0.6070, -0.1914,  ...,  0.2413, -1.2000,  0.4625],
        ...,
        [-0.8851, -0.4065, -0.4282,  ...,  0.1055, -1.1599,  0.2343],
        [-0.8775, -0.2844, -0.3916,  ...,  0.1836, -1.0791,  0.2562],
        [-0.8637, -0.4200, -0.4500,  ...,  0.0537, -1.0010,  0.2746]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[141,  25,   0,  ...,   0,   0,   0],
        [ 68,  25,   0,  ...,   0,   0,   0],
        [ 73,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：8，总数：100



Epoch: 1 batch index: 100/342 loss = 1.697384 acc: 8.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4887, -0.3533, -0.2464,  ..., -0.3629, -0.4335, -0.1973],
        [-0.7676, -0.1995, -0.3284,  ..., -0.1125, -0.9198,  0.2186],
        [-0.7108, -0.4248, -0.3053,  ...,  0.1282, -0.9838,  0.2159],
        ...,
        [-0.9041, -0.6553, -0.1693,  ...,  0.0325, -1.2275,  0.2629],
        [-0.8844, -0.6275, -0.2094,  ...,  0.1354, -1.1312,  0.2209],
        [-0.9693, -0.7301, -0.2245,  ...,  0.0210, -1.1679,  0.2602]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        ...,
        [135,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：9，总数：101



Epoch: 1 batch index: 101/342 loss = 1.877607 acc: 8.91089108910891 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.7847, -0.4253, -0.2035,  ..., -0.2684, -0.4392, -0.1463],
        [-0.9264, -0.3139, -0.4129,  ..., -0.1989, -1.2047,  0.1502],
        [-0.7612, -0.5008, -0.3194,  ...,  0.0543, -1.1146,  0.1457],
        ...,
        [-1.0060, -0.7514, -0.0561,  ...,  0.1034, -1.2806,  0.2247],
        [-1.1309, -0.6309, -0.0085,  ...,  0.1644, -1.2066,  0.3291],
        [-1.0571, -0.7120, -0.0754,  ...,  0.0882, -1.1488,  0.3323]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：102



Epoch: 1 batch index: 102/342 loss = 1.803670 acc: 9.803921568627452 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.7456, -0.2798,  0.1732,  ..., -0.2913, -0.5545, -0.1021],
        [-0.8190, -0.3407, -0.1884,  ...,  0.3855, -0.9077,  0.3598],
        [-0.9669, -0.1926, -0.1993,  ...,  0.2427, -1.0823,  0.3952],
        ...,
        [-0.7667, -0.7038, -0.1933,  ..., -0.0068, -1.0488,  0.0721],
        [-0.7082, -0.6959, -0.1187,  ..., -0.0865, -1.0444, -0.0444],
        [-0.8123, -0.7173, -0.1720,  ..., -0.0386, -1.0321,  0.0150]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[103,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [140,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [144,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：103



Epoch: 1 batch index: 103/342 loss = 1.891672 acc: 9.70873786407767 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5314, -0.4046, -0.0561,  ..., -0.5484, -0.4829, -0.3054],
        [-0.4097, -0.0504, -0.3299,  ..., -0.0621, -1.2628, -0.0026],
        [-0.6677, -0.4815, -0.3519,  ...,  0.1091, -0.9085,  0.0934],
        ...,
        [-1.1052, -0.6264, -0.0225,  ..., -0.0571, -0.9634,  0.2675],
        [-1.0606, -0.5817,  0.0417,  ..., -0.0667, -0.9942,  0.2988],
        [-1.0597, -0.6935, -0.0445,  ..., -0.0323, -0.7595,  0.5008]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[ 87,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：104



Epoch: 1 batch index: 104/342 loss = 1.687768 acc: 9.615384615384617 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5613, -0.4030,  0.0856,  ..., -0.3773, -0.4135, -0.0930],
        [-0.5842, -0.3612,  0.0406,  ..., -0.1622, -0.8416,  0.2401],
        [-0.7272, -0.3312, -0.3740,  ...,  0.3332, -0.9745,  0.3418],
        ...,
        [-1.0951, -0.5280, -0.1442,  ...,  0.0477, -0.9833,  0.1051],
        [-1.1180, -0.6307, -0.2448,  ..., -0.0075, -0.8306,  0.0688],
        [-1.0968, -0.5372, -0.1374,  ..., -0.0716, -0.9258,  0.1109]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[114,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [144,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：105



Epoch: 1 batch index: 105/342 loss = 2.174952 acc: 9.523809523809524 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5643, -0.5158,  0.0280,  ..., -0.4362, -0.4272, -0.1728],
        [-0.8104, -0.6193,  0.0857,  ...,  0.0481, -0.9148,  0.4216],
        [-0.8424, -0.6418, -0.1901,  ...,  0.2453, -0.9657,  0.5662],
        ...,
        [-0.9080, -0.5203, -0.0676,  ...,  0.0228, -0.9238,  0.2542],
        [-0.9032, -0.5795, -0.0272,  ...,  0.1462, -0.9472,  0.3480],
        [-0.8663, -0.5537, -0.0314,  ..., -0.0272, -0.9817,  0.3022]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[149,  25,   0,  ...,   0,   0,   0],
        [106,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：106



Epoch: 1 batch index: 106/342 loss = 1.851583 acc: 9.433962264150944 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5578, -0.3680, -0.1164,  ..., -0.2969, -0.4738, -0.2153],
        [-0.4810, -0.4363, -0.3350,  ...,  0.2850, -1.1227,  0.3792],
        [-0.6459, -0.3187, -0.2141,  ...,  0.2233, -1.2678,  0.2524],
        ...,
        [-1.0518, -0.9296, -0.0060,  ...,  0.1132, -1.0133,  0.1672],
        [-0.9560, -0.9270,  0.0071,  ...,  0.1812, -0.8478,  0.1056],
        [-0.9872, -0.8727, -0.0310,  ...,  0.1769, -0.8986,  0.1823]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [125,  25,   0,  ...,   0,   0,   0],
        [ 65,  25,   0,  ...,   0,   0,   0],
        ...,
        [109,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 73,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：107



Epoch: 1 batch index: 107/342 loss = 2.016120 acc: 9.345794392523365 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3855, -0.4425, -0.1004,  ..., -0.2288, -0.4360, -0.2428],
        [-0.3043, -0.4153, -0.3232,  ...,  0.3758, -0.9291,  0.2851],
        [-0.6902, -0.4399, -0.3684,  ...,  0.4734, -1.0873,  0.1733],
        ...,
        [-0.8280, -0.5535, -0.2420,  ..., -0.0477, -0.9821, -0.0159],
        [-0.7939, -0.5184, -0.1973,  ..., -0.0855, -0.9358,  0.0759],
        [-0.8528, -0.6626, -0.3238,  ...,  0.0102, -0.9229,  0.1691]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([100], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [156,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：108



Epoch: 1 batch index: 108/342 loss = 1.996633 acc: 9.25925925925926 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3385, -0.5566, -0.2251,  ..., -0.2462, -0.4968, -0.2783],
        [-0.3194, -0.4759, -0.4406,  ...,  0.0965, -0.9533,  0.0680],
        [-0.5577, -0.5933, -0.3812,  ...,  0.1456, -1.0235,  0.3599],
        ...,
        [-0.5943, -0.5780, -0.4719,  ...,  0.0170, -1.0416,  0.0982],
        [-0.6815, -0.6237, -0.4124,  ...,  0.1000, -1.1227,  0.1772],
        [-0.5669, -0.7446, -0.5025,  ..., -0.0381, -0.9758,  0.1344]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 63,  25,   0,  ...,   0,   0,   0],
        [120,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 67,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [ 95,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：109



Epoch: 1 batch index: 109/342 loss = 1.988632 acc: 9.174311926605505 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5867, -0.5485, -0.1198,  ..., -0.2893, -0.5345, -0.1642],
        [-0.6829, -0.5657, -0.1080,  ..., -0.1277, -0.9826,  0.2744],
        [-0.6737, -0.6560, -0.3774,  ...,  0.1084, -1.2449,  0.2595],
        ...,
        [-1.0305, -0.8501, -0.0307,  ...,  0.2289, -1.0273,  0.1851],
        [-0.8969, -0.7781,  0.0064,  ...,  0.1258, -0.8592,  0.2352],
        [-0.9176, -0.8115, -0.0864,  ...,  0.1713, -0.9884,  0.3506]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 47,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        [128,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：110



Epoch: 1 batch index: 110/342 loss = 1.881302 acc: 9.090909090909092 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5146, -0.6054,  0.0407,  ..., -0.4173, -0.2571, -0.0856],
        [-0.6870, -0.6459, -0.0700,  ..., -0.1103, -0.9415,  0.5995],
        [-0.5578, -0.7130, -0.1053,  ...,  0.3855, -0.9775,  0.3713],
        ...,
        [-0.7617, -0.6159, -0.1292,  ..., -0.1132, -1.0744,  0.1102],
        [-0.8277, -0.5381, -0.0721,  ..., -0.1800, -0.9924,  0.1549],
        [-0.8688, -0.6158, -0.2757,  ..., -0.2077, -0.9537,  0.2293]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([109], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [129,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：111



Epoch: 1 batch index: 111/342 loss = 1.782167 acc: 9.00900900900901 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4686, -0.4207,  0.0616,  ..., -0.5323, -0.2460,  0.0298],
        [-0.5524, -0.4004,  0.0179,  ..., -0.1280, -0.8370,  0.0987],
        [-0.6881, -0.4691, -0.2238,  ...,  0.0570, -0.8239,  0.5146],
        ...,
        [-0.7696, -0.5208, -0.0893,  ..., -0.1340, -0.7962,  0.3955],
        [-0.7683, -0.6238, -0.2738,  ...,  0.0483, -0.8978,  0.3490],
        [-0.8491, -0.5968, -0.2139,  ..., -0.0419, -0.7828,  0.2791]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([109], device='cuda:0')
decoder的输出结果为： tensor([[ 46,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [138,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：10，总数：112



Epoch: 1 batch index: 112/342 loss = 1.978820 acc: 8.928571428571429 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4781, -0.5634, -0.1116,  ..., -0.5163, -0.3013, -0.1914],
        [-0.5031, -0.6679,  0.1100,  ..., -0.0714, -0.9182,  0.3992],
        [-0.6561, -0.6157, -0.2463,  ...,  0.2595, -1.0529,  0.4504],
        ...,
        [-0.7932, -0.8415, -0.1158,  ...,  0.0466, -1.0929,  0.2123],
        [-0.7914, -0.7793, -0.1630,  ..., -0.0256, -0.9051,  0.3335],
        [-0.7734, -0.8060, -0.1161,  ..., -0.0075, -0.9755,  0.3266]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [111,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：11，总数：113



Epoch: 1 batch index: 113/342 loss = 1.906499 acc: 9.734513274336283 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5644, -0.5460,  0.2192,  ..., -0.4849, -0.4165,  0.1330],
        [-0.5772, -0.5204,  0.2592,  ...,  0.1022, -1.2631,  0.1621],
        [-0.7736, -0.6747,  0.0647,  ...,  0.2020, -0.9878,  0.4241],
        ...,
        [-1.0710, -0.6947, -0.0597,  ...,  0.2101, -0.8989,  0.4291],
        [-1.0418, -0.7767, -0.0282,  ...,  0.1407, -0.7367,  0.4735],
        [-1.0541, -0.6881,  0.1024,  ...,  0.1617, -0.9509,  0.4016]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[147,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        ...,
        [109,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [137,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：11，总数：114



Epoch: 1 batch index: 114/342 loss = 1.776714 acc: 9.649122807017543 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5019, -0.4784,  0.0835,  ..., -0.6059, -0.1388, -0.0102],
        [-0.4673, -0.2837, -0.0196,  ...,  0.0033, -0.5195,  0.3594],
        [-0.7211, -0.5237, -0.0166,  ...,  0.3429, -0.9559,  0.3220],
        ...,
        [-0.6890, -0.7888, -0.0343,  ...,  0.0328, -0.8843,  0.2121],
        [-0.6735, -0.7164,  0.0018,  ..., -0.0745, -0.8592,  0.2130],
        [-0.8002, -0.8073, -0.0929,  ..., -0.2126, -0.8969,  0.2863]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[131,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：11，总数：115



Epoch: 1 batch index: 115/342 loss = 1.948358 acc: 9.565217391304348 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4984, -0.5692,  0.2031,  ..., -0.5647, -0.2970, -0.1072],
        [-1.0092, -0.8754,  0.0572,  ...,  0.0639, -0.5174,  0.3766],
        [-0.8041, -0.8279, -0.0312,  ...,  0.1695, -0.9089,  0.5461],
        ...,
        [-0.8646, -0.6807,  0.1375,  ..., -0.1929, -0.7418,  0.2517],
        [-0.8246, -0.8550,  0.0441,  ..., -0.2115, -0.6987,  0.2687],
        [-0.9193, -0.7976,  0.0423,  ..., -0.2128, -0.6720,  0.3646]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[89, 25,  0,  ...,  0,  0,  0],
        [46, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0],
        ...,
        [46, 25,  0,  ...,  0,  0,  0],
        [94, 25,  0,  ...,  0,  0,  0],
        [45, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：11，总数：116



Epoch: 1 batch index: 116/342 loss = 1.746955 acc: 9.482758620689655 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4900, -0.4726,  0.1811,  ..., -0.6490, -0.3291,  0.1798],
        [-0.5755, -0.6454, -0.0259,  ...,  0.1133, -0.8565,  0.6524],
        [-0.6303, -0.5625,  0.0308,  ...,  0.0376, -1.0586,  0.6533],
        ...,
        [-0.9417, -0.8005,  0.0726,  ..., -0.0063, -0.9849,  0.4083],
        [-0.8905, -0.7521,  0.1793,  ..., -0.1023, -1.0183,  0.5042],
        [-0.8891, -0.7855, -0.0301,  ..., -0.0547, -0.9256,  0.4462]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：11，总数：117



Epoch: 1 batch index: 117/342 loss = 1.768957 acc: 9.401709401709402 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4091, -0.5864,  0.2759,  ..., -0.4043, -0.4810,  0.3263],
        [-0.5234, -0.4384, -0.0797,  ...,  0.3643, -1.0304,  0.5497],
        [-0.6012, -0.4657, -0.0057,  ...,  0.2398, -1.2398,  0.7671],
        ...,
        [-0.9151, -0.3854,  0.2761,  ..., -0.2064, -0.9364,  0.4843],
        [-0.8546, -0.5159,  0.2393,  ..., -0.1291, -0.8077,  0.4344],
        [-0.9295, -0.5580,  0.0356,  ..., -0.1432, -0.8487,  0.5404]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([96], device='cuda:0')
decoder的输出结果为： tensor([[103,  25,   0,  ...,   0,   0,   0],
        [ 45,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [139,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：11，总数：118



Epoch: 1 batch index: 118/342 loss = 1.582628 acc: 9.322033898305085 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2097, -0.4624,  0.1380,  ..., -0.6566, -0.3643,  0.0509],
        [-0.1773, -0.5387,  0.3487,  ..., -0.2951, -0.8845,  0.5378],
        [-0.4099, -0.3555, -0.0995,  ..., -0.0340, -1.0256,  0.6410],
        ...,
        [-0.3884, -0.6633,  0.0260,  ..., -0.0962, -0.9360,  0.3813],
        [-0.3620, -0.7185,  0.0102,  ...,  0.0242, -1.0468,  0.3795],
        [-0.3722, -0.6620,  0.0544,  ..., -0.1447, -0.8997,  0.2720]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [144,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：12，总数：119



Epoch: 1 batch index: 119/342 loss = 1.689014 acc: 10.084033613445378 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1835, -0.5860,  0.2618,  ..., -0.6380, -0.2926,  0.0271],
        [-0.2384, -0.3022,  0.2557,  ..., -0.0695, -0.8779,  0.2945],
        [-0.5293, -0.5118, -0.0770,  ...,  0.2441, -1.0170,  0.4597],
        ...,
        [-0.7868, -0.5332, -0.0908,  ...,  0.0056, -1.0095,  0.4466],
        [-0.7319, -0.4300,  0.1163,  ...,  0.0430, -0.9437,  0.5252],
        [-0.7722, -0.5258, -0.0594,  ...,  0.0431, -0.8079,  0.4407]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[46, 25,  0,  ...,  0,  0,  0],
        [94, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0],
        ...,
        [85, 25,  0,  ...,  0,  0,  0],
        [45, 25,  0,  ...,  0,  0,  0],
        [64, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：12，总数：120



Epoch: 1 batch index: 120/342 loss = 1.797097 acc: 10.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2381, -0.3575,  0.1436,  ..., -0.6555, -0.4423, -0.1076],
        [-0.1796, -0.3517,  0.2855,  ..., -0.1861, -0.9276,  0.4754],
        [-0.3138, -0.3402, -0.1133,  ...,  0.2162, -1.1140,  0.4436],
        ...,
        [-0.6567, -0.3575,  0.1355,  ..., -0.0259, -0.9235,  0.5283],
        [-0.6042, -0.4024, -0.1183,  ..., -0.0963, -0.8384,  0.6089],
        [-0.6945, -0.4717,  0.0419,  ..., -0.1307, -0.8295,  0.5082]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [142,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：121



Epoch: 1 batch index: 121/342 loss = 1.877737 acc: 10.743801652892563 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3129, -0.4089,  0.2743,  ..., -0.6727, -0.3329, -0.0525],
        [-0.3856, -0.4476,  0.2624,  ..., -0.1265, -0.7277,  0.4296],
        [-0.5549, -0.5610, -0.0225,  ...,  0.0955, -1.1157,  0.3630],
        ...,
        [-0.7387, -0.8699, -0.2035,  ...,  0.1728, -0.9491,  0.5951],
        [-0.5579, -0.7690, -0.0799,  ...,  0.1865, -1.0710,  0.6792],
        [-0.5929, -0.7902, -0.0723,  ...,  0.0789, -1.1060,  0.5975]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([96], device='cuda:0')
decoder的输出结果为： tensor([[ 47,  25,   0,  ...,   0,   0,   0],
        [156,  25,   0,  ...,   0,   0,   0],
        [156,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [167,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：122



Epoch: 1 batch index: 122/342 loss = 1.966357 acc: 10.655737704918032 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1699, -0.5506,  0.4453,  ..., -0.5106, -0.3507, -0.0432],
        [-0.2848, -0.5116,  0.4123,  ..., -0.0296, -0.6723,  0.4577],
        [-0.3727, -0.6437,  0.2186,  ...,  0.2725, -1.2570,  0.5147],
        ...,
        [-0.8808, -0.5316,  0.1318,  ..., -0.1338, -0.9382,  0.1509],
        [-0.8647, -0.6050,  0.2279,  ..., -0.0220, -1.0876,  0.1738],
        [-0.8017, -0.5273,  0.3531,  ..., -0.1825, -0.9891,  0.2928]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([94, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([94], device='cuda:0')
decoder的输出结果为： tensor([[ 47,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 86,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [142,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：123



Epoch: 1 batch index: 123/342 loss = 1.875371 acc: 10.569105691056912 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4726, -0.4286,  0.1565,  ..., -0.5144, -0.5088, -0.1828],
        [-0.8584, -0.3388,  0.0453,  ..., -0.3410, -1.0730,  0.3776],
        [-0.6551, -0.5231, -0.1456,  ...,  0.2240, -1.2890,  0.4355],
        ...,
        [-0.9326, -0.8076,  0.0600,  ...,  0.0883, -0.9936,  0.2837],
        [-0.8056, -0.7363,  0.1669,  ..., -0.0061, -0.9523,  0.4044],
        [-0.8003, -0.7448,  0.2158,  ...,  0.0886, -0.8867,  0.4591]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([96], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [125,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：124



Epoch: 1 batch index: 124/342 loss = 1.665928 acc: 10.483870967741936 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4556, -0.4390,  0.2074,  ..., -0.2884, -0.5787, -0.2017],
        [-0.3187, -0.4400,  0.1442,  ...,  0.1991, -0.9835,  0.6314],
        [-0.6087, -0.5594, -0.0517,  ...,  0.3245, -1.5014,  0.1099],
        ...,
        [-0.6426, -0.4373, -0.1433,  ...,  0.0038, -1.0944,  0.1919],
        [-0.8356, -0.6026, -0.1998,  ...,  0.0140, -1.0086,  0.1398],
        [-0.6700, -0.6134, -0.0502,  ..., -0.0645, -0.9119,  0.3363]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([96, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([96], device='cuda:0')
decoder的输出结果为： tensor([[ 95,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [131,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：125



Epoch: 1 batch index: 125/342 loss = 1.906878 acc: 10.4 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6103, -0.5480,  0.2979,  ..., -0.3461, -0.6809, -0.0084],
        [-0.3407, -0.3452, -0.0308,  ...,  0.0338, -1.2639,  0.5825],
        [-0.8192, -0.4748, -0.0265,  ...,  0.2894, -1.3402,  0.4881],
        ...,
        [-0.9051, -0.6285,  0.0720,  ...,  0.1661, -1.1185,  0.2551],
        [-0.8944, -0.6211,  0.0729,  ...,  0.2880, -1.0805,  0.2166],
        [-0.9294, -0.6834,  0.1103,  ...,  0.2121, -0.9209,  0.1318]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[100,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 45,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：126



Epoch: 1 batch index: 126/342 loss = 1.611262 acc: 10.317460317460316 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6909, -0.5854,  0.2071,  ..., -0.3594, -0.7293, -0.2234],
        [-0.7897, -0.5377,  0.0609,  ...,  0.1784, -0.8554,  0.2243],
        [-0.7240, -0.7421, -0.2188,  ...,  0.3082, -1.4570,  0.3389],
        ...,
        [-0.9798, -0.5965,  0.1950,  ...,  0.1801, -1.2755,  0.3840],
        [-0.8150, -0.6276,  0.0549,  ...,  0.2162, -1.2833,  0.3141],
        [-0.9785, -0.6066,  0.0549,  ...,  0.1319, -1.2044,  0.2719]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([109,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([109], device='cuda:0')
decoder的输出结果为： tensor([[ 75,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 64,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 91,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：127



Epoch: 1 batch index: 127/342 loss = 1.666672 acc: 10.236220472440944 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-2.7977e-01, -4.0690e-01,  4.8807e-02,  ..., -6.1382e-01,
         -5.9367e-01, -7.8447e-02],
        [-5.2655e-01, -4.1822e-01, -4.4009e-01,  ...,  3.0037e-01,
         -1.1387e+00,  2.1263e-01],
        [-4.9333e-01, -5.2339e-01, -1.6894e-01,  ...,  6.0367e-02,
         -1.4246e+00,  4.0932e-01],
        ...,
        [-8.4447e-01, -7.0738e-01, -8.8185e-03,  ...,  1.4053e-01,
         -1.1784e+00,  3.1766e-01],
        [-8.6256e-01, -6.5829e-01,  8.6820e-02,  ...,  8.8603e-02,
         -1.2373e+00,  3.6080e-01],
        [-8.8649e-01, -7.2358e-01,  3.0322e-04,  ...,  3.4094e-02,
         -1.2014e+00,  3.3730e-01]], device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[103,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 85,  25,   0,  ...,   0,   0,   0],
        [156,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：128



Epoch: 1 batch index: 128/342 loss = 1.800261 acc: 10.15625 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4645, -0.4537, -0.0268,  ..., -0.2343, -0.9663, -0.0272],
        [-0.4268, -0.1866,  0.1636,  ...,  0.3016, -1.5450,  0.4603],
        [-0.6458, -0.5700, -0.1350,  ...,  0.5595, -1.6098,  0.4561],
        ...,
        [-0.9498, -0.8873,  0.0167,  ...,  0.2162, -1.0107,  0.2418],
        [-1.0138, -0.8397,  0.0423,  ...,  0.3367, -1.1132,  0.2289],
        [-0.9815, -0.8845,  0.0481,  ...,  0.2101, -0.9953,  0.2577]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[156,  25,   0,  ...,   0,   0,   0],
        [ 68,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 73,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：13，总数：129



Epoch: 1 batch index: 129/342 loss = 2.043792 acc: 10.077519379844961 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4336, -0.6011, -0.1799,  ..., -0.5484, -0.6085, -0.4494],
        [-0.5119, -0.6738,  0.0117,  ..., -0.2206, -1.0838,  0.2934],
        [-0.5642, -0.5459, -0.2556,  ...,  0.1645, -1.2800,  0.2729],
        ...,
        [-0.9268, -0.7412, -0.1660,  ...,  0.1401, -1.3948,  0.0075],
        [-0.9008, -0.8662, -0.1980,  ..., -0.0484, -1.2750,  0.0193],
        [-0.7999, -0.8677, -0.2721,  ...,  0.1412, -1.2191,  0.2386]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 35,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 75,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：14，总数：130



Epoch: 1 batch index: 130/342 loss = 1.627913 acc: 10.76923076923077 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5553, -0.5551, -0.2328,  ..., -0.4300, -0.6337, -0.1919],
        [-0.5515, -0.4063,  0.0520,  ..., -0.1008, -1.3700,  0.7335],
        [-0.7099, -0.5341, -0.1406,  ...,  0.2676, -1.5810,  0.4297],
        ...,
        [-0.8092, -0.3719, -0.1822,  ..., -0.0831, -1.2164, -0.0264],
        [-0.7064, -0.5115, -0.2899,  ..., -0.0708, -1.1274, -0.0343],
        [-0.7688, -0.6038, -0.2206,  ..., -0.0904, -1.1716,  0.0623]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([100], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [142,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        ...,
        [111,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 35,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：14，总数：131



Epoch: 1 batch index: 131/342 loss = 2.103246 acc: 10.687022900763358 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4518, -0.6063, -0.1154,  ..., -0.5169, -0.6253, -0.2182],
        [-0.6938, -0.3050, -0.1132,  ...,  0.1230, -1.3423,  0.3043],
        [-0.7292, -0.5872, -0.2552,  ...,  0.3091, -1.3838,  0.2648],
        ...,
        [-0.7294, -0.4542, -0.3130,  ...,  0.1135, -1.2141,  0.1602],
        [-0.6816, -0.4083, -0.3131,  ..., -0.0134, -1.3116,  0.2504],
        [-0.7899, -0.5445, -0.3901,  ...,  0.0252, -1.2507,  0.0982]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测结果的完整输出为： tensor([100,  25,  25,  ...,  25,  25,  25], device='cuda:0')
预测值的结果为： tensor([100], device='cuda:0')
decoder的输出结果为： tensor([[85, 25,  0,  ...,  0,  0,  0],
        [47, 25,  0,  ...,  0,  0,  0],
        [91, 25,  0,  ...,  0,  0,  0],
        ...,
        [46, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0],
        [24, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：14，总数：132



Epoch: 1 batch index: 132/342 loss = 1.634817 acc: 10.606060606060606 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3897, -0.4338, -0.2877,  ..., -0.4872, -0.7773, -0.4920],
        [-0.2968, -0.4185, -0.4280,  ...,  0.1573, -1.3063,  0.3608],
        [-0.4892, -0.2314, -0.4316,  ...,  0.1035, -1.4216,  0.2026],
        ...,
        [-0.9877, -0.6059, -0.0572,  ...,  0.0761, -1.2139,  0.3121],
        [-0.9443, -0.7617, -0.1784,  ..., -0.0171, -1.0549,  0.3871],
        [-1.1382, -0.7166, -0.2161,  ..., -0.1831, -0.9787,  0.3470]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 96,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        ...,
        [111,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [116,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：14，总数：133



Epoch: 1 batch index: 133/342 loss = 1.837282 acc: 10.526315789473683 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6665, -0.5468, -0.0991,  ..., -0.5986, -0.5086, -0.3462],
        [-0.7229, -0.6401, -0.1059,  ..., -0.3056, -1.2086,  0.4866],
        [-0.7127, -0.6110, -0.1439,  ...,  0.2348, -1.2635,  0.2314],
        ...,
        [-1.0545, -0.6169, -0.2337,  ..., -0.1855, -0.9526,  0.1668],
        [-0.9422, -0.7964, -0.0793,  ..., -0.0088, -0.8783,  0.2639],
        [-1.0839, -0.5708, -0.0180,  ..., -0.1485, -0.9104,  0.1982]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[62, 25,  0,  ...,  0,  0,  0],
        [91, 25,  0,  ...,  0,  0,  0],
        [94, 25,  0,  ...,  0,  0,  0],
        ...,
        [64, 25,  0,  ...,  0,  0,  0],
        [92, 25,  0,  ...,  0,  0,  0],
        [45, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：14，总数：134



Epoch: 1 batch index: 134/342 loss = 1.532622 acc: 10.44776119402985 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5308, -0.3897, -0.2208,  ..., -0.3817, -0.8942, -0.2880],
        [-0.8800, -0.3085, -0.2783,  ..., -0.0275, -1.3333,  0.3931],
        [-0.8071, -0.3474, -0.1636,  ...,  0.3247, -1.5586,  0.1264],
        ...,
        [-0.8119, -0.7203, -0.1092,  ...,  0.1502, -1.3623,  0.4941],
        [-0.7498, -0.5473, -0.1784,  ...,  0.3136, -1.4054,  0.5262],
        [-0.7904, -0.6783, -0.1777,  ...,  0.1221, -1.2491,  0.5124]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([63], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [101,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：14，总数：135



Epoch: 1 batch index: 135/342 loss = 1.740619 acc: 10.37037037037037 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5473, -0.4730, -0.0589,  ..., -0.3108, -0.8855, -0.1160],
        [-0.9220, -0.2819, -0.3513,  ...,  0.0821, -1.5122,  0.4470],
        [-0.8907, -0.4723, -0.3756,  ...,  0.5101, -1.6043,  0.5425],
        ...,
        [-0.9791, -0.7947, -0.1822,  ...,  0.1391, -1.2994,  0.3188],
        [-0.8519, -0.7731,  0.0110,  ...,  0.0861, -1.2575,  0.2230],
        [-1.0730, -0.6641, -0.1449,  ...,  0.0531, -1.2063,  0.4535]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [140,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [125,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：15，总数：136



Epoch: 1 batch index: 136/342 loss = 1.454499 acc: 11.029411764705882 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.0932, -0.3417, -0.1883,  ..., -0.7431, -0.3889, -0.4095],
        [ 0.1444,  0.0918, -0.3911,  ..., -0.1030, -1.0708, -0.0682],
        [-0.2546, -0.3707, -0.6789,  ...,  0.0722, -0.8871,  0.0711],
        ...,
        [-0.7641, -0.6260, -0.0857,  ...,  0.0091, -1.1343, -0.0500],
        [-0.8010, -0.6141, -0.0455,  ...,  0.0415, -1.1991, -0.0773],
        [-0.7656, -0.6014, -0.1482,  ...,  0.0013, -1.0815, -0.0817]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 87,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 62,  25,   0,  ...,   0,   0,   0],
        [112,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：15，总数：137



Epoch: 1 batch index: 137/342 loss = 1.998911 acc: 10.948905109489052 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1906, -0.2790, -0.0688,  ..., -0.6420, -0.5172, -0.3173],
        [-0.2755, -0.6271, -0.1232,  ..., -0.0360, -0.9654,  0.2724],
        [-0.3031, -0.2092, -0.3235,  ...,  0.0739, -1.2208,  0.2488],
        ...,
        [-0.6823, -0.4904, -0.2771,  ...,  0.0669, -1.1468,  0.1355],
        [-0.6841, -0.5238, -0.3066,  ...,  0.2468, -1.2360,  0.1181],
        [-0.6794, -0.5646, -0.2244,  ...,  0.0159, -1.1914,  0.2675]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [137,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 47,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：16，总数：138



Epoch: 1 batch index: 138/342 loss = 1.896886 acc: 11.594202898550725 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2997, -0.5053, -0.1309,  ..., -0.5946, -0.3823, -0.3906],
        [-0.0073, -0.3212,  0.0290,  ..., -0.0138, -0.6436, -0.0410],
        [-0.4422, -0.4168, -0.2974,  ..., -0.0920, -1.1627,  0.1067],
        ...,
        [-0.6902, -0.5907,  0.0968,  ...,  0.0799, -1.0132,  0.1722],
        [-0.6177, -0.6591,  0.1653,  ...,  0.1178, -0.9250,  0.1837],
        [-0.6402, -0.6857,  0.0514,  ...,  0.0024, -1.0241,  0.1959]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[35, 25,  0,  ...,  0,  0,  0],
        [73, 25,  0,  ...,  0,  0,  0],
        [47, 25,  0,  ...,  0,  0,  0],
        ...,
        [94, 25,  0,  ...,  0,  0,  0],
        [96, 25,  0,  ...,  0,  0,  0],
        [62, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：16，总数：139



Epoch: 1 batch index: 139/342 loss = 2.041844 acc: 11.510791366906476 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6139, -0.5072, -0.0155,  ..., -0.3791, -0.4708, -0.0848],
        [-0.8332, -0.6348,  0.0742,  ...,  0.1177, -0.7779,  0.3030],
        [-0.8670, -0.5197, -0.0519,  ...,  0.3977, -1.1680,  0.6075],
        ...,
        [-0.8069, -0.6579, -0.1471,  ...,  0.1443, -1.1209,  0.1930],
        [-0.7477, -0.6617, -0.3001,  ...,  0.2681, -1.0101,  0.1511],
        [-0.7985, -0.6546, -0.2880,  ...,  0.2056, -0.9004,  0.3367]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[135,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [114,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [113,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：16，总数：140



Epoch: 1 batch index: 140/342 loss = 2.122602 acc: 11.428571428571429 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3969, -0.6285, -0.0115,  ..., -0.3132, -0.5215, -0.1190],
        [-0.5476, -0.1901,  0.0100,  ...,  0.3129, -0.9329,  0.4042],
        [-0.6441, -0.5393, -0.1401,  ...,  0.4751, -1.1586,  0.3573],
        ...,
        [-0.7143, -0.3682, -0.1365,  ...,  0.3483, -1.1202,  0.0733],
        [-1.0035, -0.4124, -0.1347,  ...,  0.4011, -1.3283,  0.1490],
        [-0.8875, -0.3960, -0.1510,  ...,  0.2176, -1.1247,  0.0468]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[ 85,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 65,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：16，总数：141



Epoch: 1 batch index: 141/342 loss = 1.763467 acc: 11.347517730496454 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6072, -0.4546, -0.0844,  ..., -0.3037, -0.5664, -0.1316],
        [-0.9044, -0.3046, -0.1588,  ...,  0.4107, -1.5161,  0.6108],
        [-0.7635, -0.4240, -0.1500,  ...,  0.2909, -1.3649,  0.6037],
        ...,
        [-1.0284, -0.5288, -0.2451,  ...,  0.2543, -0.9815,  0.4227],
        [-0.9575, -0.5368, -0.2231,  ...,  0.0944, -0.9084,  0.5904],
        [-0.9698, -0.6594, -0.2316,  ...,  0.0574, -0.9085,  0.6041]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[101,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 91,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：16，总数：142



Epoch: 1 batch index: 142/342 loss = 1.537644 acc: 11.267605633802818 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4301, -0.4027, -0.1191,  ..., -0.4055, -0.3583, -0.1225],
        [-0.5970, -0.2926, -0.6010,  ..., -0.0431, -1.1780,  0.3566],
        [-0.5804, -0.4655, -0.4501,  ...,  0.3219, -1.2170,  0.3963],
        ...,
        [-0.9426, -0.4247, -0.2944,  ...,  0.3315, -1.0102,  0.4096],
        [-0.9015, -0.4572, -0.4075,  ...,  0.3520, -1.0166,  0.3112],
        [-0.9438, -0.3034, -0.2880,  ...,  0.2958, -1.0390,  0.4110]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([63], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 91,  25,   0,  ...,   0,   0,   0],
        [100,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：16，总数：143



Epoch: 1 batch index: 143/342 loss = 1.651504 acc: 11.188811188811188 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2872, -0.0771, -0.0775,  ..., -0.1959, -0.3823,  0.1126],
        [-0.3245,  0.0392, -0.4960,  ...,  0.2424, -1.1463,  0.1477],
        [-0.4045, -0.4078, -0.4163,  ...,  0.4727, -1.0159,  0.4334],
        ...,
        [-0.8935, -0.4774, -0.2949,  ...,  0.2048, -1.2075,  0.4734],
        [-0.6934, -0.4898, -0.3764,  ...,  0.1192, -0.9981,  0.3513],
        [-0.7875, -0.5256, -0.4542,  ...,  0.1242, -1.0358,  0.4142]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([63], device='cuda:0')
decoder的输出结果为： tensor([[ 63,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        ...,
        [136,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：17，总数：144



Epoch: 1 batch index: 144/342 loss = 1.783740 acc: 11.805555555555555 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.4731, -0.2319,  0.0185,  ..., -0.3488, -0.7398,  0.0673],
        [-0.7930, -0.1088, -0.0848,  ..., -0.0238, -1.0735,  0.6564],
        [-0.6431, -0.3385, -0.2952,  ...,  0.3577, -1.3937,  0.7125],
        ...,
        [-0.9227, -0.6341,  0.0471,  ..., -0.0648, -0.9771,  0.5165],
        [-0.8225, -0.6109, -0.0186,  ..., -0.0452, -0.8663,  0.5813],
        [-0.9598, -0.6177,  0.0896,  ...,  0.0196, -0.9934,  0.5244]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([63], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [126,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 99,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：17，总数：145



Epoch: 1 batch index: 145/342 loss = 1.786520 acc: 11.724137931034482 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3637, -0.3716,  0.0115,  ..., -0.4919, -0.3314, -0.1330],
        [-0.3773, -0.1426,  0.1459,  ...,  0.0078, -1.0597,  0.9817],
        [-0.5162, -0.2473, -0.0505,  ...,  0.4936, -1.3007,  0.6573],
        ...,
        [-0.9655, -0.5416, -0.1975,  ...,  0.4641, -1.2328,  0.4038],
        [-0.9335, -0.4741, -0.2352,  ...,  0.4821, -1.3699,  0.4309],
        [-0.7846, -0.4302, -0.2804,  ...,  0.3614, -1.2605,  0.3804]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [ 92,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：17，总数：146



Epoch: 1 batch index: 146/342 loss = 1.456846 acc: 11.643835616438356 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.1274, -0.3004, -0.0153,  ..., -0.4104, -0.4965, -0.0913],
        [ 0.0016, -0.4100,  0.1463,  ...,  0.0827, -0.8900,  0.5564],
        [-0.1197, -0.1546, -0.3655,  ...,  0.3647, -0.9956,  0.5413],
        ...,
        [-0.9659, -0.7489, -0.0662,  ...,  0.0187, -0.9579,  0.4212],
        [-0.9833, -0.7847, -0.0218,  ...,  0.0358, -0.8844,  0.4399],
        [-0.8194, -0.7563, -0.0503,  ...,  0.0252, -0.9735,  0.3695]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 24,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [103,  25,   0,  ...,   0,   0,   0],
        ...,
        [132,  25,   0,  ...,   0,   0,   0],
        [ 45,  25,   0,  ...,   0,   0,   0],
        [101,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：147



Epoch: 1 batch index: 147/342 loss = 1.455457 acc: 12.244897959183673 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2299, -0.3760, -0.1663,  ..., -0.6271, -0.1023, -0.0803],
        [-0.0853, -0.0319, -0.4899,  ...,  0.1582, -1.1663,  0.1564],
        [-0.3079, -0.2718, -0.4321,  ...,  0.3285, -0.9811,  0.5176],
        ...,
        [-0.9583, -0.8500, -0.1179,  ...,  0.2462, -0.9650,  0.4919],
        [-0.8262, -0.9141, -0.0541,  ...,  0.2313, -0.9558,  0.5653],
        [-0.9561, -0.8618, -0.0548,  ...,  0.2133, -1.0609,  0.6030]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[63, 25,  0,  ...,  0,  0,  0],
        [96, 25,  0,  ...,  0,  0,  0],
        [45, 25,  0,  ...,  0,  0,  0],
        ...,
        [35, 25,  0,  ...,  0,  0,  0],
        [47, 25,  0,  ...,  0,  0,  0],
        [47, 25,  0,  ...,  0,  0,  0]], device='cuda:0')
正确数：18，总数：148



Epoch: 1 batch index: 148/342 loss = 1.860981 acc: 12.162162162162163 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.2761, -0.6008, -0.0213,  ..., -0.4216, -0.4211, -0.1317],
        [-0.3768, -0.2644,  0.0954,  ...,  0.1764, -0.9472,  1.1292],
        [-0.4677, -0.4499,  0.1801,  ...,  0.3399, -1.3555,  0.7929],
        ...,
        [-0.8905, -0.8588,  0.2342,  ...,  0.4088, -1.0810,  0.3076],
        [-0.7920, -0.8541,  0.1772,  ...,  0.3424, -0.9943,  0.3750],
        [-0.8187, -0.8857,  0.1455,  ...,  0.2613, -0.9267,  0.4766]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([67, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([67], device='cuda:0')
decoder的输出结果为： tensor([[109,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 94,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 91,  25,   0,  ...,   0,   0,   0],
        [ 99,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：149



Epoch: 1 batch index: 149/342 loss = 2.061065 acc: 12.080536912751679 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.8528, -0.6900,  0.3273,  ..., -0.1543, -0.5086,  0.1930],
        [-0.6386, -0.7915,  0.1717,  ..., -0.1809, -0.9122,  0.8761],
        [-0.6644, -0.7439,  0.2529,  ...,  0.5242, -1.0450,  0.6933],
        ...,
        [-0.9651, -0.5109,  0.2103,  ...,  0.1560, -1.0441,  0.5232],
        [-0.8605, -0.5121,  0.2858,  ...,  0.1511, -1.0657,  0.5988],
        [-0.9812, -0.6169,  0.1410,  ...,  0.2681, -1.0182,  0.6454]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 62,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        [ 87,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：150



Epoch: 1 batch index: 150/342 loss = 1.827476 acc: 12.0 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.7291, -0.6634,  0.4548,  ..., -0.1023, -0.4745,  0.1486],
        [-0.3574, -0.3931,  0.4452,  ...,  0.3621, -0.7552,  0.2239],
        [-0.6557, -0.6995,  0.0633,  ...,  0.4206, -1.0692,  0.3654],
        ...,
        [-0.7748, -0.7987, -0.1393,  ...,  0.1555, -1.0753,  0.4212],
        [-0.7947, -0.6999, -0.0938,  ...,  0.0759, -1.3008,  0.6077],
        [-0.7526, -0.7268,  0.0293,  ...,  0.1250, -1.1688,  0.4071]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 35,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [ 47,  25,   0,  ...,   0,   0,   0],
        ...,
        [144,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：151



Epoch: 1 batch index: 151/342 loss = 1.730237 acc: 11.920529801324504 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.8287, -0.6146,  0.2046,  ..., -0.2137, -0.4113,  0.1192],
        [-0.7050, -0.8882,  0.6224,  ...,  0.3085, -0.6503,  0.4880],
        [-0.8080, -0.5577,  0.2998,  ...,  0.4863, -1.0576,  0.4422],
        ...,
        [-0.8639, -0.7295,  0.0737,  ...,  0.5226, -1.1327,  0.5033],
        [-0.9035, -0.7727,  0.0459,  ...,  0.5091, -1.0282,  0.6226],
        [-0.9685, -0.7873, -0.0367,  ...,  0.3659, -0.9826,  0.5929]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[111,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 85,  25,   0,  ...,   0,   0,   0],
        ...,
        [100,  25,   0,  ...,   0,   0,   0],
        [141,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：152



Epoch: 1 batch index: 152/342 loss = 2.013525 acc: 11.842105263157894 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.7758, -0.8800,  0.1047,  ..., -0.1309, -0.4732,  0.2359],
        [-0.6524, -0.6892,  0.0226,  ...,  0.4127, -0.9020,  0.8690],
        [-0.8175, -0.6040, -0.0467,  ...,  0.4481, -1.1626,  0.6777],
        ...,
        [-0.8972, -0.7590, -0.2288,  ...,  0.6443, -1.2196,  0.4732],
        [-0.8389, -0.8735, -0.3473,  ...,  0.6700, -1.0429,  0.5574],
        [-0.8359, -0.7795, -0.2750,  ...,  0.5566, -1.1473,  0.5191]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([47, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([47], device='cuda:0')
decoder的输出结果为： tensor([[ 94,  25,   0,  ...,   0,   0,   0],
        [132,  25,   0,  ...,   0,   0,   0],
        [144,  25,   0,  ...,   0,   0,   0],
        ...,
        [109,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：153



Epoch: 1 batch index: 153/342 loss = 2.063904 acc: 11.76470588235294 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.7192, -0.5272,  0.0169,  ...,  0.0435, -0.6661,  0.6494],
        [-0.6419, -0.2203, -0.2920,  ...,  0.0976, -1.2946,  0.7900],
        [-0.6957, -0.5253, -0.2480,  ...,  0.4998, -1.2346,  0.9812],
        ...,
        [-1.0317, -0.8038,  0.1916,  ...,  0.3367, -1.1724,  0.4415],
        [-1.0130, -0.9034,  0.1345,  ...,  0.3412, -1.1827,  0.4838],
        [-1.0783, -0.9057,  0.0880,  ...,  0.1801, -1.2346,  0.5430]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([91, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([91], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 91,  25,   0,  ...,   0,   0,   0],
        ...,
        [131,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 86,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：154



Epoch: 1 batch index: 154/342 loss = 1.964505 acc: 11.688311688311687 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.7172, -0.5916,  0.3078,  ..., -0.2163, -0.3917,  0.0981],
        [-0.4679, -0.4251,  0.2486,  ...,  0.1490, -0.8167,  0.2289],
        [-0.6313, -0.6039, -0.1861,  ...,  0.4206, -1.2910,  0.3976],
        ...,
        [-0.8545, -0.6812, -0.0934,  ...,  0.2332, -1.0978,  0.4809],
        [-0.7549, -0.6820,  0.0249,  ...,  0.3258, -1.0530,  0.4889],
        [-0.8875, -0.8347, -0.2557,  ...,  0.3771, -0.8235,  0.4138]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[126,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 67,  25,   0,  ...,   0,   0,   0],
        [111,  25,   0,  ...,   0,   0,   0],
        [147,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：155



Epoch: 1 batch index: 155/342 loss = 1.721091 acc: 11.612903225806452 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.3840, -0.3525,  0.1827,  ..., -0.6523, -0.1475, -0.1365],
        [-0.4753, -0.2541, -0.2713,  ..., -0.2099, -0.8831,  0.3897],
        [-0.5671, -0.4711, -0.1880,  ..., -0.0138, -0.9287,  0.3800],
        ...,
        [-0.6394, -0.4612,  0.0360,  ..., -0.1414, -0.9028,  0.3041],
        [-0.7209, -0.4627, -0.0654,  ..., -0.0736, -0.9795,  0.2226],
        [-0.7128, -0.4851,  0.0633,  ..., -0.1292, -0.8937,  0.2144]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([24, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([24], device='cuda:0')
decoder的输出结果为： tensor([[ 67,  25,   0,  ...,   0,   0,   0],
        [ 24,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        ...,
        [147,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0],
        [ 67,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：156



Epoch: 1 batch index: 156/342 loss = 1.471790 acc: 11.538461538461538 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.7417, -0.3886,  0.1180,  ...,  0.0128, -0.5661,  0.2164],
        [-0.9485, -0.2806, -0.0035,  ...,  0.6040, -1.1346,  0.7629],
        [-0.7248, -0.2396, -0.0788,  ...,  0.7761, -1.2111,  0.8085],
        ...,
        [-0.5930, -0.5734, -0.1954,  ...,  0.1822, -1.1719,  0.6210],
        [-0.5536, -0.5631, -0.1578,  ...,  0.2707, -1.2068,  0.5979],
        [-0.5415, -0.4970, -0.0121,  ...,  0.1533, -1.1081,  0.6949]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([63, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([63], device='cuda:0')
decoder的输出结果为： tensor([[ 91,  25,   0,  ...,   0,   0,   0],
        [ 96,  25,   0,  ...,   0,   0,   0],
        [109,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 94,  25,   0,  ...,   0,   0,   0],
        [128,  25,   0,  ...,   0,   0,   0],
        [ 63,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：157



Epoch: 1 batch index: 157/342 loss = 1.639994 acc: 11.464968152866243 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.5273, -0.4712,  0.3148,  ..., -0.5285, -0.1733, -0.0071],
        [-0.8047, -0.2429,  0.0956,  ...,  0.2609, -0.9027,  0.7187],
        [-0.7157, -0.4519,  0.0106,  ..., -0.0742, -0.7973,  0.4833],
        ...,
        [-0.7313, -0.7724,  0.3945,  ...,  0.3364, -0.6428,  0.5895],
        [-0.6993, -0.7876,  0.2550,  ...,  0.1959, -0.5753,  0.5730],
        [-0.5557, -0.8711,  0.2970,  ...,  0.2143, -0.5523,  0.6774]],
       device='cuda:0', grad_fn=<ViewBackward0>)
原始输出的结果形状为： torch.Size([9840, 999])
预测结果的维度为： torch.Size([9840])
预测结果为：tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测结果的完整输出为： tensor([62, 25, 25,  ..., 25, 25, 25], device='cuda:0')
预测值的结果为： tensor([62], device='cuda:0')
decoder的输出结果为： tensor([[101,  25,   0,  ...,   0,   0,   0],
        [135,  25,   0,  ...,   0,   0,   0],
        [149,  25,   0,  ...,   0,   0,   0],
        ...,
        [ 24,  25,   0,  ...,   0,   0,   0],
        [ 46,  25,   0,  ...,   0,   0,   0],
        [ 62,  25,   0,  ...,   0,   0,   0]], device='cuda:0')
正确数：18，总数：158



Epoch: 1 batch index: 158/342 loss = 2.144487 acc: 11.39240506329114 %
位置编码的计算 torch.Size([15, 656, 512]) torch.Size([15, 1, 512]) 15
位置编码的计算 torch.Size([656, 15, 512]) torch.Size([656, 1, 512]) 656
模型预测的结果为： tensor([[-0.6282, -0.4063,  0.3894,  ..., -0.4371, -0.1511,  0.1713],
        [-0.5104, -0.2447,  0.3733,  ..., -0.0157, -0.7404,  1.0830],
        [-0.7371, -0.2853,  0.2364,  ...,  0.2043, -1.0968,  0.7196],
        ...,
        [-0.8745, -0.8559,  0.1171,  ..., -0.0743, -0.5609,  0.7363],
        [-0.7184, -0.5070,  0.2048,  ..., -0.0104, -0.8183,  0.6078],
        [-0.8679, -0.8693,  0.0101,  ...,  0.0356, -0.7388,  0.8199]],
       device='cuda:0', grad_fn=<ViewBackward0>)
